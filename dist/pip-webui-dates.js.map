{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","src/date/Date.ts","src/date_format/DateConvertService.ts","src/date_format/DateFormatFilter.ts","src/date_format/DateFormatService.ts","src/date_format/IDateConvertService.ts","src/date_format/IDateFormatService.ts","src/date_format/index.ts","src/date_range/DateRange.ts","src/dependencies/TranslateFilter.ts","src/index.ts","src/time_range/TimeRange.ts","src/time_range_edit/TimeRangeEdit.ts","temp/pip-webui-dates-html.min.js"],"names":[],"mappings":"AAAA;ACCA,CAAC;IAUG,IAAM,YAAY,GAAkB;QAChC,QAAQ,EAAE,cAAc;QACxB,QAAQ,EAAE,aAAa;QACvB,KAAK,EAAE,UAAU;QACjB,QAAQ,EAAE,GAAG;KAChB,CAAA;IAED;QAAA;QAOA,CAAC;QAAD,kBAAC;IAAD,CAPA,AAOC,IAAA;IAGD;QAsBI,wBACI,SAAwC,EACxC,MAAiB;YAtBb,eAAU,GAA8B,MAAM,CAAC,UAAU,EAAE,CAAC;YAuBhE,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC;YACjI,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,MAAM,CAAC;YACrI,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;YACvD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC;YAEzD,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;YACzF,IAAI,CAAC,GAAG,GAAG,KAAK,GAAG,KAAK,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC;YAC1C,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC;YACjD,IAAI,CAAC,IAAI,GAAG,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC;YAE/C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAChD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAC/B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YAE7B,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,KAAK,CAAC;QAEnE,CAAC;QAEM,mCAAU,GAAjB,UAAkB,OAAoB;YAClC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;gBAC9C,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC;gBACxC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC9B,CAAC;QACL,CAAC;QAEO,gCAAO,GAAf,UAAgB,KAAa,EAAE,IAAY;YACvC,IAAI,KAAK,GAAW,EAAE,EAAE,IAAI,GAAa,EAAE,CAAC;YAE5C,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC5D,KAAK,GAAG,EAAE,CAAC;YACf,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;oBACd,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;wBAEP,KAAK,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;oBACrC,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,KAAK,GAAG,EAAE,CAAC;oBACf,CAAC;gBACL,CAAC;YACL,CAAC;YACD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;gBACtC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACjB,CAAC;YAED,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAEO,kCAAS,GAAjB;YACI,IAAI,MAAM,GAAU,EAAE,CAAC;YAEvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBACnC,MAAM,CAAC,IAAI,CAAC;oBACR,EAAE,EAAE,CAAC;oBACL,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC;iBACjC,CAAC,CAAC;YACP,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QAEO,iCAAQ,GAAhB;YACI,IAAI,WAAW,GAAW,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,EAC9C,SAAS,GAAW,IAAI,CAAC,QAAQ,KAAK,QAAQ,GAAG,WAAW,GAAG,WAAW,GAAG,GAAG,EAChF,OAAO,GAAW,IAAI,CAAC,QAAQ,KAAK,MAAM,GAAG,WAAW,GAAG,WAAW,GAAG,GAAG,EAC5E,KAAK,GAAG,EAAE,CAAC;YAEf,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,MAAM,CAAC,CAAC,CAAC;gBAC3B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,OAAO,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC;oBAChD,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAClB,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,SAAS,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC;oBAChD,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAClB,CAAC;YACL,CAAC;YAED,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAEO,kCAAS,GAAjB;YACI,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAE/C,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACnC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;oBACzB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;gBAC3B,CAAC;gBAED,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACrB,CAAC;QACL,CAAC;QAEO,iCAAQ,GAAhB,UAAiB,CAAM;YACnB,IAAI,KAAK,GAAS,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,EACtD,GAAG,GAAW,KAAK,GAAG,KAAK,CAAC,OAAO,EAAE,GAAG,IAAI,EAC5C,KAAK,GAAW,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,GAAG,IAAI,EACnD,IAAI,GAAW,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC;YAGtD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;gBAC7C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YACpD,CAAC;YAGD,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;YACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACrB,CAAC;QAEM,iCAAQ,GAAf;YACI,IAAI,KAAW,CAAC;YAEhB,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACtC,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAClE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;gBACnB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC9B,CAAC;QACL,CAAC;QAEM,uCAAc,GAArB;YACI,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,IAAI,CAAC,QAAQ,EAAE,CAAC;QACpB,CAAC;QAEM,sCAAa,GAApB;YACI,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,IAAI,CAAC,QAAQ,EAAE,CAAC;QACpB,CAAC;QACL,qBAAC;IAAD,CAxJA,AAwJC,IAAA;IAED,IAAM,aAAa,GAAyB;QACxC,QAAQ,EAAE,YAAY;QACtB,WAAW,EAAE,gBAAgB;QAC7B,UAAU,EAAE,cAAc;KAC7B,CAAA;IAED,OAAO;SACF,MAAM,CAAC,SAAS,EAAE,CAAC,oBAAoB,CAAC,CAAC;SACzC,SAAS,CAAC,SAAS,EAAE,aAAa,CAAC,CAAA;AAC5C,CAAC,CAAC,EAAE,CAAC;;;;;;;;;;;;;;;AC7LL,CAAC;IACG;QA2RI,yBAAmB,MAAsB;YAzR/B,kBAAa,GAAa,IAAI,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;YAC/E,mBAAc,GAAW,IAAI,CAAA;YAyRnC,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAChD,CAAC;QAxRO,2CAAiB,GAAzB,UAA0B,KAAU;YAChC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,KAAK,KAAK,IAAI,CAAC;QACxD,CAAC;QAEO,kCAAQ,GAAhB,UAAiB,KAAa;YAC1B,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;YAED,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;YAE7C,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,MAAM,CAAC,KAAK,CAAA;YAChB,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACrC,CAAC;QAEO,2CAAiB,GAAzB,UAA0B,KAAa;YACnC,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;YAED,IAAI,KAAK,GAAG,KAAK,IAAI,SAAS,GAAG,MAAM,GAAG,KAAK,EAC3C,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;YAE7C,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC;gBACZ,MAAM,CAAC,KAAK,CAAA;YAChB,CAAC;YACD,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAErC,CAAC;QAEO,wCAAc,GAAtB,UAAuB,KAAU,EAAE,WAAmB;YAClD,IAAI,IAAmB,EACnB,SAAiB,CAAC;YAEtB,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtE,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,SAAS,GAAG,WAAW,GAAG,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC;YAE5D,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAClC,CAAC;QAEO,yCAAe,GAAvB,UAAwB,KAAU,EAAE,WAAmB;YACnD,IAAI,IAAmB,EACnB,OAAsB,EACtB,YAAoB,CAAC;YAEzB,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtE,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,OAAO,GAAG,MAAM,EAAE,CAAC;YACnB,YAAY,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC,cAAc,CAAC,WAAW,GAAG,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;YAEnG,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAChC,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;YAC9E,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACrC,CAAC;QAEO,mCAAS,GAAjB,UAAkB,KAAU,EAAE,WAAmB;YAC7C,IAAI,IAAmB,EACnB,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC,cAAc,CAAC,WAAW,GAAG,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,EAC5F,mBAAmB,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAEjG,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtE,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QAC5C,CAAC;QAEO,wCAAc,GAAtB,UAAuB,KAAU,EAAE,WAAmB;YAClD,IAAI,IAAmB,EACnB,MAAM,GAAG,WAAW,GAAG,WAAW,GAAG,IAAI,CAAC,cAAc,EACxD,QAAQ,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,EACrD,gBAAgB,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;YAE9E,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtE,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QACzC,CAAC;QAGO,qCAAW,GAAnB,UAAoB,MAAW,EAAE,MAAW,EAAE,WAAmB;YAC7D,IAAI,SAAwB,EACxB,OAAsB,EACtB,MAAM,GAAG,WAAW,GAAG,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC;YAE7D,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACjC,SAAS,GAAG,IAAI,CAAC;YACrB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,SAAS,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;YACzJ,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACjC,OAAO,GAAG,IAAI,CAAC;YACnB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;YACvJ,CAAC;YAED,EAAE,CAAC,CAAC,SAAS,KAAK,IAAI,IAAI,OAAO,KAAK,IAAI,CAAC;gBAAC,MAAM,CAAC,EAAE,CAAC;YAEtD,EAAE,CAAC,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC;gBACrB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YACvC,CAAC;YACD,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,IAAI,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAChD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;gBAAA,CAAC;YAC1C,CAAC;YAED,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAE7B,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;YAC3E,CAAC;YAED,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBACrC,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBACvC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,WAAW,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;gBACtF,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAE3F,CAAC;YACD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAE7E,CAAC;QAEO,sCAAY,GAApB,UAAqB,KAAU,EAAE,KAAa;YAC1C,IAAI,IAAmB,CAAC;YAExB,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;YACjE,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtE,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;YACtD,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC;QACxC,CAAC;QAEO,oCAAU,GAAlB,UAAmB,KAAU,EAAE,KAAa,EAAE,MAAc;YACxD,IAAI,IAAS,EACT,MAAW,EACX,SAAiB,CAAC;YAEtB,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBAC5B,SAAS,GAAG,CAAC,CAAC;YAClB,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtE,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACZ,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;YAChE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACjC,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,CAAC;QACxC,CAAC;QAEO,wCAAc,GAAtB,UAAuB,KAAU,EAAE,UAAkB,EAAE,UAAkB,EAAE,SAAmB;YAC1F,IAAI,IAAmB,EACnB,MAAc,EACd,OAAsB,CAAC;YAE3B,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtE,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,OAAO,GAAG,MAAM,EAAE,CAAC;YACnB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACZ,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACrE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACrE,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QAEO,qCAAW,GAAnB,UAAoB,KAAU,EAAE,UAAkB,EAAE,UAAkB;YAClE,IAAI,IAAmB,EACnB,MAAc,EACd,OAAY,CAAC;YAEjB,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtE,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,OAAO,GAAG,MAAM,EAAE,CAAC;YAEnB,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,KAAK,EAAE,IAAI,OAAO,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAClG,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACrC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACrE,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QAIA,CAAC;QAEF,sBAAW,mCAAM;iBAAjB;gBACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;YACxB,CAAC;;;WAAA;QAEM,qCAAW,GAAlB,UAAmB,MAAc;YAC7B,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,MAAM,CAAC;QACnC,CAAC;QAIM,qCAAW,GAAlB,UAAmB,IAAS;YACxB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACxC,CAAC;QAKM,sCAAY,GAAnB,UAAoB,KAAU,EAAE,QAAgB;YAC5C,IAAI,IAAmB,EACnB,KAAa,EACb,MAAW,CAAC;YAEhB,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAChC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;YAExE,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;QAC3B,CAAC;QAEM,sCAAY,GAAnB,UAAoB,KAAU,EAAE,QAAgB;YAC5C,IAAI,IAAmB,EACnB,KAAa,EACb,MAAqB,CAAC;YAE1B,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;YACjE,CAAC;YAED,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;YACtD,CAAC;YAED,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAChC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;YAE5E,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;QAC3B,CAAC;QAEM,qCAAW,GAAlB,UAAmB,QAAgB;YAC/B,IAAI,IAAmB,EACnB,KAAa,EACb,MAAqB,CAAC;YAE1B,IAAI,GAAG,MAAM,EAAE,CAAC;YAChB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;YACrD,CAAC;YAED,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;YAC/B,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAErC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;QAC3B,CAAC;QAEM,kCAAQ,GAAf,UAAgB,KAAU,EAAE,KAAa;YACrC,IAAI,IAAmB,CAAC;YAExB,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC5D,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;YACtF,CAAC;YAED,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;YAClD,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,MAAM,EAAE,CAAC;QAC7C,CAAC;QAEM,oCAAU,GAAjB,UAAkB,KAAU;YACxB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC3C,CAAC;QAEM,kCAAQ,GAAf,UAAgB,KAAU,EAAE,MAAc;YACtC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QACjD,CAAC;QAEM,qCAAW,GAAlB,UAAmB,KAAU;YACzB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC5C,CAAC;QAEM,mCAAS,GAAhB,UAAiB,KAAU,EAAE,MAAc;YACvC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;QAClD,CAAC;QAEM,sCAAY,GAAnB,UAAoB,KAAU;YAC1B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC7C,CAAC;QAEM,oCAAU,GAAjB,UAAkB,KAAU,EAAE,MAAc;YACxC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;QACnD,CAAC;QAEM,qCAAW,GAAlB,UAAmB,KAAU;YACzB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC5C,CAAC;QAEM,mCAAS,GAAhB,UAAiB,KAAU,EAAE,MAAc;YACvC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;QAClD,CAAC;QAEL,sBAAC;IAAD,CAvZA,AAuZC,IAAA;IAED;QAII,gCACI,QAAyB;YAEzB,IAAI,CAAC,OAAO,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;YAClC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC9B,CAAC;QAGM,4CAAW,GAAlB,UAAmB,MAAc;YAC7B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;QAIM,4CAAW,GAAlB,UAAmB,IAAS;YACxB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC5C,CAAC;QAKM,6CAAY,GAAnB,UAAoB,KAAU,EAAE,QAAgB;YAC5C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACxD,CAAC;QAEM,6CAAY,GAAnB,UAAoB,KAAU,EAAE,QAAgB;YAC5C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACxD,CAAC;QAEM,4CAAW,GAAlB,UAAmB,QAAgB;YAC/B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAChD,CAAC;QAEM,yCAAQ,GAAf,UAAgB,KAAU,EAAE,KAAa;YACrC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACjD,CAAC;QAEM,2CAAU,GAAjB,UAAkB,KAAU;YACxB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC;QAEM,yCAAQ,GAAf,UAAgB,KAAU,EAAE,MAAc;YACtC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAClD,CAAC;QAEM,4CAAW,GAAlB,UAAmB,KAAU;YACzB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC7C,CAAC;QAEM,0CAAS,GAAhB,UAAiB,KAAU,EAAE,MAAc;YACvC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACnD,CAAC;QAEM,6CAAY,GAAnB,UAAoB,KAAU;YAC1B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QAC9C,CAAC;QAEM,2CAAU,GAAjB,UAAkB,KAAU,EAAE,MAAc;YACxC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACpD,CAAC;QAEM,4CAAW,GAAlB,UAAmB,KAAU;YACzB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC7C,CAAC;QAEM,0CAAS,GAAhB,UAAiB,KAAU,EAAE,MAAc;YACvC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACnD,CAAC;QAEL,6BAAC;IAAD,CAzEA,AAyEC,IAAA;IAED;QAAkC,uCAAe;QAI7C;mBACI,kBAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAC7B,CAAC;QAEM,kCAAI,GAAX;YACI,UAAU,CAAC;YAEX,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC;gBACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,sBAAsB,CAAC,IAAI,CAAC,CAAC;YACrD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;QACL,0BAAC;IAAD,CAfA,AAeC,CAfiC,eAAe,GAehD;IAED,OAAO;SACF,MAAM,CAAC,iBAAiB,EAAE,EAAE,CAAC;SAC7B,QAAQ,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,CAAC;AACzD,CAAC,CAAC,EAAE,CAAC;;;;;ACxfL,0BAA0B,aAAiC;IACvD,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU,EAAE,MAAc;QAC9B,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IACnD,CAAC,CAAA;AACL,CAAC;AAED,kCAAkC,aAAiC;IAC/D,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU,EAAE,MAAc;QAC9B,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAC3D,CAAC,CAAA;AACL,CAAC;AAED,8BAA8B,aAAiC;IAC3D,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IAC/C,CAAC,CAAA;AACL,CAAC;AAED,+BAA+B,aAAiC;IAC5D,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC,CAAA;AACL,CAAC;AAED,gCAAgC,aAAiC;IAC7D,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IACjD,CAAC,CAAA;AACL,CAAC;AAED,2BAA2B,aAAiC;IACxD,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC,CAAA;AACL,CAAC;AAED,+BAA+B,aAAiC;IAC5D,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC,CAAA;AACL,CAAC;AAED,0BAA0B,aAAiC;IACvD,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC,CAAA;AACL,CAAC;AAED,0BAA0B,aAAiC;IACvD,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC,CAAA;AACL,CAAC;AAED,+BAA+B,aAAiC;IAC5D,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC,CAAA;AACL,CAAC;AAED,mCAAmC,aAAiC;IAChE,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC,CAAA;AACL,CAAC;AAED,oCAAoC,aAAiC;IACjE,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;IACrD,CAAC,CAAA;AACL,CAAC;AAED,kCAAkC,aAAiC;IAC/D,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC,CAAA;AACL,CAAC;AAED,uCAAuC,aAAiC;IACpE,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU,EAAE,SAAkB;QAClC,MAAM,CAAC,aAAa,CAAC,uBAAuB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IACnE,CAAC,CAAA;AACL,CAAC;AAED,wCAAwC,aAAiC;IACrE,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU,EAAE,SAAkB;QAClC,MAAM,CAAC,aAAa,CAAC,wBAAwB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IACpE,CAAC,CAAA;AACL,CAAC;AAED,sCAAsC,aAAiC;IACnE,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU,EAAE,SAAkB;QAClC,MAAM,CAAC,aAAa,CAAC,sBAAsB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IAClE,CAAC,CAAA;AACL,CAAC;AAED,oCAAoC,aAAiC;IACjE,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU,EAAE,SAAkB;QAClC,MAAM,CAAC,aAAa,CAAC,oBAAoB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;IAChE,CAAC,CAAA;AACL,CAAC;AAED,kCAAkC,aAAiC;IAC/D,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC,CAAA;AACL,CAAC;AAED,+BAA+B,aAAiC;IAC5D,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC,CAAA;AACL,CAAC;AAED,8BAA8B,aAAiC;IAC3D,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IAC/C,CAAC,CAAA;AACL,CAAC;AAED,oCAAoC,aAAiC;IACjE,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;IACrD,CAAC,CAAA;AACL,CAAC;AAED,mCAAmC,aAAiC;IAChE,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC,CAAA;AACL,CAAC;AAED,kCAAkC,aAAiC;IAC/D,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC,CAAA;AACL,CAAC;AAED,mCAAmC,aAAiC;IAChE,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;IACpD,CAAC,CAAA;AACL,CAAC;AAED,+BAA+B,aAAiC;IAC5D,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,MAAW,EAAE,MAAW;QAC5B,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACzD,CAAC,CAAA;AACL,CAAC;AAED,mCAAmC,aAAiC;IAChE,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,MAAW,EAAE,MAAW;QAC5B,MAAM,CAAC,aAAa,CAAC,mBAAmB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAC7D,CAAC,CAAA;AACL,CAAC;AAED,6BAA6B,aAAiC;IAC1D,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC9C,CAAC,CAAA;AACL,CAAC;AAED,kCAAkC,aAAiC;IAC/D,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;IACnD,CAAC,CAAA;AACL,CAAC;AAED,oCAAoC,aAAiC;IACjE,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;IACrD,CAAC,CAAA;AACL,CAAC;AAED,2BAA2B,aAAiC;IACxD,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC,CAAA;AACL,CAAC;AAED,+BAA+B,aAAiC;IAC5D,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC,CAAA;AACL,CAAC;AAED,2CAA2C,aAAiC;IACxE,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC,CAAA;AACL,CAAC;AAED,4CAA4C,aAAiC;IACzE,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;IAC7D,CAAC,CAAA;AACL,CAAC;AAED,4CAA4C,aAAiC;IACzE,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;IAC7D,CAAC,CAAA;AACL,CAAC;AAED,6CAA6C,aAAiC;IAC1E,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,6BAA6B,CAAC,KAAK,CAAC,CAAC;IAC9D,CAAC,CAAA;AACL,CAAC;AAED,2CAA2C,aAAiC;IACxE,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,aAAa,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC,CAAA;AACL,CAAC;AAED,qCAAqC,aAAiC;IAClE,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU,EAAE,KAAU;QAC1B,MAAM,CAAC,aAAa,CAAC,qBAAqB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC7D,CAAC,CAAA;AACL,CAAC;AAED,2BAA2B,cAAmC;IAC1D,UAAU,CAAC;IAEX,MAAM,CAAC,UAAC,KAAU;QACd,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;IAC7C,CAAC,CAAA;AACL,CAAC;AAED,OAAO;KACF,MAAM,CAAC,gBAAgB,EAAE,EAAE,CAAC;KAC5B,MAAM,CAAC,YAAY,EAAE,gBAAgB,CAAC;KACtC,MAAM,CAAC,oBAAoB,EAAE,wBAAwB,CAAC;KACtD,MAAM,CAAC,sBAAsB,EAAE,0BAA0B,CAAC;KAC1D,MAAM,CAAC,iBAAiB,EAAE,qBAAqB,CAAC;KAChD,MAAM,CAAC,kBAAkB,EAAE,sBAAsB,CAAC;KAClD,MAAM,CAAC,gBAAgB,EAAE,oBAAoB,CAAC;KAC9C,MAAM,CAAC,aAAa,EAAE,iBAAiB,CAAC;KACxC,MAAM,CAAC,iBAAiB,EAAE,qBAAqB,CAAC;KAChD,MAAM,CAAC,YAAY,EAAE,gBAAgB,CAAC;KACtC,MAAM,CAAC,YAAY,EAAE,gBAAgB,CAAC;KACtC,MAAM,CAAC,iBAAiB,EAAE,qBAAqB,CAAC;KAChD,MAAM,CAAC,qBAAqB,EAAE,yBAAyB,CAAC;KACxD,MAAM,CAAC,sBAAsB,EAAE,0BAA0B,CAAC;KAC1D,MAAM,CAAC,oBAAoB,EAAE,wBAAwB,CAAC;KACtD,MAAM,CAAC,yBAAyB,EAAE,6BAA6B,CAAC;KAChE,MAAM,CAAC,0BAA0B,EAAE,8BAA8B,CAAC;KAClE,MAAM,CAAC,wBAAwB,EAAE,4BAA4B,CAAC;KAC9D,MAAM,CAAC,oBAAoB,EAAE,wBAAwB,CAAC;KACtD,MAAM,CAAC,iBAAiB,EAAE,qBAAqB,CAAC;KAChD,MAAM,CAAC,gBAAgB,EAAE,oBAAoB,CAAC;KAC9C,MAAM,CAAC,sBAAsB,EAAE,0BAA0B,CAAC;KAC1D,MAAM,CAAC,qBAAqB,EAAE,yBAAyB,CAAC;KACxD,MAAM,CAAC,oBAAoB,EAAE,wBAAwB,CAAC;KACtD,MAAM,CAAC,qBAAqB,EAAE,yBAAyB,CAAC;KACxD,MAAM,CAAC,iBAAiB,EAAE,qBAAqB,CAAC;KAChD,MAAM,CAAC,qBAAqB,EAAE,yBAAyB,CAAC;KACxD,MAAM,CAAC,eAAe,EAAE,mBAAmB,CAAC;KAC5C,MAAM,CAAC,oBAAoB,EAAE,wBAAwB,CAAC;KACtD,MAAM,CAAC,sBAAsB,EAAE,0BAA0B,CAAC;KAC1D,MAAM,CAAC,aAAa,EAAE,iBAAiB,CAAC;KACxC,MAAM,CAAC,iBAAiB,EAAE,qBAAqB,CAAC;KAChD,MAAM,CAAC,6BAA6B,EAAE,iCAAiC,CAAC;KACxE,MAAM,CAAC,8BAA8B,EAAE,kCAAkC,CAAC;KAC1E,MAAM,CAAC,8BAA8B,EAAE,kCAAkC,CAAC;KAC1E,MAAM,CAAC,+BAA+B,EAAE,mCAAmC,CAAC;KAC5E,MAAM,CAAC,6BAA6B,EAAE,iCAAiC,CAAC;KACxE,MAAM,CAAC,uBAAuB,EAAE,2BAA2B,CAAC,CAAC;;;;;;;;;;;;;;;ACvVlE,CAAC;IACG;QA8MI,2BAAmB,MAAsB;YA5M/B,kBAAa,GAAa,IAAI,KAAK,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;YAC/E,mBAAc,GAAW,IAAI,CAAA;YA4MnC,IAAI,CAAC,OAAO,GAAG,MAAM,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAChD,CAAC;QA3MO,6CAAiB,GAAzB,UAA0B,KAAU;YAChC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,KAAK,KAAK,IAAI,CAAC;QACxD,CAAC;QAGO,0CAAc,GAAtB,UAAuB,KAAU,EAAE,WAAmB;YAClD,IAAI,IAAmB,EACnB,SAAiB,CAAC;YAEtB,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtE,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,SAAS,GAAG,WAAW,GAAG,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC;YAE5D,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAClC,CAAC;QAEO,2CAAe,GAAvB,UAAwB,KAAU,EAAE,WAAmB;YACnD,IAAI,IAAmB,EACnB,OAAsB,EACtB,YAAoB,CAAC;YAEzB,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtE,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,OAAO,GAAG,MAAM,EAAE,CAAC;YACnB,YAAY,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC,cAAc,CAAC,WAAW,GAAG,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,CAAC;YAEnG,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAChC,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;YAC9E,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACrC,CAAC;QAEO,qCAAS,GAAjB,UAAkB,KAAU,EAAE,WAAmB;YAC7C,IAAI,IAAmB,EACnB,MAAM,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC,cAAc,CAAC,WAAW,GAAG,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,EAC5F,mBAAmB,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAEjG,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtE,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QAC5C,CAAC;QAEO,0CAAc,GAAtB,UAAuB,KAAU,EAAE,WAAmB;YAClD,IAAI,IAAmB,EACnB,MAAM,GAAG,WAAW,GAAG,WAAW,GAAG,IAAI,CAAC,cAAc,EACxD,QAAQ,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,EACrD,gBAAgB,GAAG,QAAQ,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;YAE9E,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtE,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;QACzC,CAAC;QAGO,uCAAW,GAAnB,UAAoB,MAAW,EAAE,MAAW,EAAE,WAAmB;YAC7D,IAAI,SAAwB,EACxB,OAAsB,EACtB,MAAM,GAAG,WAAW,GAAG,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC;YAE7D,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACjC,SAAS,GAAG,IAAI,CAAC;YACrB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,SAAS,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;YACzJ,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACjC,OAAO,GAAG,IAAI,CAAC;YACnB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC;YACvJ,CAAC;YAED,EAAE,CAAC,CAAC,SAAS,KAAK,IAAI,IAAI,OAAO,KAAK,IAAI,CAAC;gBAAC,MAAM,CAAC,EAAE,CAAC;YAEtD,EAAE,CAAC,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC;gBACrB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YACvC,CAAC;YACD,EAAE,CAAC,CAAC,OAAO,KAAK,IAAI,IAAI,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAChD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;gBAAA,CAAC;YAC1C,CAAC;YAED,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAE7B,MAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;YAC3E,CAAC;YAED,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBACrC,EAAE,CAAC,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;oBACvC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,WAAW,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;gBACtF,CAAC;gBACD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;YAE3F,CAAC;YACD,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAE7E,CAAC;QAEO,0CAAc,GAAtB,UAAuB,KAAU,EAAE,UAAkB,EAAE,UAAkB,EAAE,SAAmB;YAC1F,IAAI,IAAmB,EACnB,MAAc,EACd,OAAsB,CAAC;YAE3B,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtE,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,OAAO,GAAG,MAAM,EAAE,CAAC;YACnB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACZ,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACrE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACrE,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QAEO,uCAAW,GAAnB,UAAoB,KAAU,EAAE,UAAkB,EAAE,UAAkB;YAClE,IAAI,IAAmB,EACnB,MAAc,EACd,OAAY,CAAC;YAEjB,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBACtE,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC1D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACzB,CAAC;YACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,OAAO,GAAG,MAAM,EAAE,CAAC;YAEnB,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,KAAK,EAAE,IAAI,IAAI,CAAC,KAAK,EAAE,IAAI,OAAO,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAClG,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACrC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACrE,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QAIA,CAAC;QAEF,sBAAW,qCAAM;iBAAjB;gBACI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;YACxB,CAAC;;;WAAA;QAEM,uCAAW,GAAlB,UAAmB,MAAc;YAC7B,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,MAAM,CAAC;QACnC,CAAC;QAKM,sCAAU,GAAjB,UAAkB,KAAU,EAAE,MAAc;YACxC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC7C,CAAC;QAEM,8CAAkB,GAAzB,UAA0B,KAAU,EAAE,MAAc;YAChD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC3C,CAAC;QAGM,2CAAe,GAAtB,UAAuB,KAAU;YAC7B,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC3C,CAAC;QAEM,gDAAoB,GAA3B,UAA4B,KAAU,EAAE,SAAmB;YACvD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;QACpE,CAAC;QAEM,4CAAgB,GAAvB,UAAwB,KAAU;YAC9B,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC;QAEM,0CAAc,GAArB,UAAsB,KAAU;YAC5B,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC;QAEM,uCAAW,GAAlB,UAAmB,KAAU;YACzB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC;QAEM,2CAAe,GAAtB,UAAuB,KAAU;YAC7B,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC9C,CAAC;QAEM,sCAAU,GAAjB,UAAkB,KAAU;YACxB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC9C,CAAC;QAEM,sCAAU,GAAjB,UAAkB,KAAU;YACxB,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC;QAEM,2CAAe,GAAtB,UAAuB,KAAU;YAC7B,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC3C,CAAC;QAEM,+CAAmB,GAA1B,UAA2B,KAAU;YACjC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;QACjD,CAAC;QAEM,gDAAoB,GAA3B,UAA4B,KAAU;YAClC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC7C,CAAC;QAEM,8CAAkB,GAAzB,UAA0B,KAAU;YAChC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC7C,CAAC;QAEM,8CAAkB,GAAzB,UAA0B,KAAU;YAChC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC9C,CAAC;QAEM,mDAAuB,GAA9B,UAA+B,KAAU,EAAE,SAAmB;YAC1D,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;QAC7D,CAAC;QAEM,oDAAwB,GAA/B,UAAgC,KAAU,EAAE,SAAmB;YAC3D,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;QAC9D,CAAC;QAEM,kDAAsB,GAA7B,UAA8B,KAAU,EAAE,SAAmB;YACzD,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;QAC9D,CAAC;QAEM,2CAAe,GAAtB,UAAuB,KAAU;YAC7B,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC;QAEM,0CAAc,GAArB,UAAsB,KAAU;YAC5B,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC7C,CAAC;QAEM,gDAAoB,GAA3B,UAA4B,KAAU;YAClC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC;QAEM,+CAAmB,GAA1B,UAA2B,KAAU;YACjC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC9C,CAAC;QAYM,8CAAkB,GAAzB,UAA0B,KAAU;YAChC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC;QAEM,+CAAmB,GAA1B,UAA2B,KAAU;YACjC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC3C,CAAC;QAEM,2CAAe,GAAtB,UAAuB,MAAW,EAAE,MAAW;YAC3C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QAClD,CAAC;QAEM,+CAAmB,GAA1B,UAA2B,MAAW,EAAE,MAAW;YAC/C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QACnD,CAAC;QAKM,yCAAa,GAApB,UAAqB,KAAU;YAC3B,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC;QAEM,8CAAkB,GAAzB,UAA0B,KAAU;YAChC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC3C,CAAC;QAEM,gDAAoB,GAA3B,UAA4B,KAAU;YAClC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC;QAKM,uCAAW,GAAlB,UAAmB,KAAU;YACzB,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;QAC5C,CAAC;QAGM,2CAAe,GAAtB,UAAuB,KAAU;YAC7B,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;QAC7C,CAAC;QAIM,uDAA2B,GAAlC,UAAmC,KAAU;YACzC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;QAC/C,CAAC;QAIM,wDAA4B,GAAnC,UAAoC,KAAU;YAC1C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,CAAA;QAC/C,CAAC;QAIM,wDAA4B,GAAnC,UAAoC,KAAU;YAC1C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;QAC9C,CAAC;QAIM,yDAA6B,GAApC,UAAqC,KAAU;YAC3C,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAA;QAC9C,CAAC;QAGM,uDAA2B,GAAlC,UAAmC,KAAU;YACzC,MAAM,CAAC,EAAE,CAAC;QACd,CAAC;QAEM,iDAAqB,GAA5B,UAA6B,KAAU,EAAE,KAAU;YAC/C,IAAI,IAAmB,EACnB,OAAY,CAAC;YAEjB,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,OAAO,GAAG,MAAM,EAAE,CAAC;YACvB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YAC5B,CAAC;YAED,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,EAAE,CAAC;YACd,CAAC;YAED,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACzC,CAAC;QAEM,uCAAW,GAAlB,UAAmB,IAAS;YACxB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACxC,CAAC;QAGL,wBAAC;IAAD,CAlaA,AAkaC,IAAA;IAED;QAII,+BACI,QAA2B;YAE3B,IAAI,CAAC,OAAO,GAAG,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;YAClC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC9B,CAAC;QAGM,2CAAW,GAAlB,UAAmB,MAAc;YAC7B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;QAGM,0CAAU,GAAjB,UAAkB,KAAU,EAAE,MAAc;YACxC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACpD,CAAC;QAGM,kDAAkB,GAAzB,UAA0B,KAAU,EAAE,MAAc;YAChD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC5D,CAAC;QAEM,+CAAe,GAAtB,UAAuB,KAAU;YAC7B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC;QAEM,gDAAgB,GAAvB,UAAwB,KAAU;YAC9B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAClD,CAAC;QAEM,8CAAc,GAArB,UAAsB,KAAU;YAC5B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAChD,CAAC;QAEM,2CAAW,GAAlB,UAAmB,KAAU;YACzB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC7C,CAAC;QAEM,+CAAe,GAAtB,UAAuB,KAAU;YAC7B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC;QAEM,0CAAU,GAAjB,UAAkB,KAAU;YACxB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC;QAEM,0CAAU,GAAjB,UAAkB,KAAU;YACxB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC;QAEM,+CAAe,GAAtB,UAAuB,KAAU;YAC7B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC;QAEM,mDAAmB,GAA1B,UAA2B,KAAU;YACjC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QACrD,CAAC;QAEM,oDAAoB,GAA3B,UAA4B,KAAU;YAClC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QACtD,CAAC;QAEM,kDAAkB,GAAzB,UAA0B,KAAU;YAChC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QACpD,CAAC;QAEM,kDAAkB,GAAzB,UAA0B,KAAU;YAChC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QACpD,CAAC;QAEM,uDAAuB,GAA9B,UAA+B,KAAU,EAAE,SAAmB;YAC1D,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QACpE,CAAC;QAEM,wDAAwB,GAA/B,UAAgC,KAAU,EAAE,SAAmB;YAC3D,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,wBAAwB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QACrE,CAAC;QAEM,sDAAsB,GAA7B,UAA8B,KAAU,EAAE,SAAmB;YACzD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QACnE,CAAC;QAEM,oDAAoB,GAA3B,UAA4B,KAAU,EAAE,SAAmB;YACvD,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QACjE,CAAC;QAEM,+CAAe,GAAtB,UAAuB,KAAU;YAC7B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC;QAEM,8CAAc,GAArB,UAAsB,KAAU;YAC5B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAChD,CAAC;QAEM,oDAAoB,GAA3B,UAA4B,KAAU;YAClC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QACtD,CAAC;QAEM,mDAAmB,GAA1B,UAA2B,KAAU;YACjC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QACrD,CAAC;QAEM,kDAAkB,GAAzB,UAA0B,KAAU;YAChC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QACpD,CAAC;QAEM,mDAAmB,GAA1B,UAA2B,KAAU;YACjC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QACrD,CAAC;QAEM,+CAAe,GAAtB,UAAuB,MAAW,EAAE,MAAW;YAC3C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC1D,CAAC;QAEM,mDAAmB,GAA1B,UAA2B,MAAW,EAAE,MAAW;YAC/C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC9D,CAAC;QAKM,6CAAa,GAApB,UAAqB,KAAU;YAC3B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC/C,CAAC;QAEM,kDAAkB,GAAzB,UAA0B,KAAU;YAChC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QACpD,CAAC;QAEM,oDAAoB,GAA3B,UAA4B,KAAU;YAClC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;QACtD,CAAC;QAKM,2CAAW,GAAlB,UAAmB,KAAU;YACzB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC7C,CAAC;QAGM,+CAAe,GAAtB,UAAuB,KAAU;YAC7B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC;QAIM,2DAA2B,GAAlC,UAAmC,KAAU;YACzC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;QAC7D,CAAC;QAIM,4DAA4B,GAAnC,UAAoC,KAAU;YAC1C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;QAC9D,CAAC;QAIM,4DAA4B,GAAnC,UAAoC,KAAU;YAC1C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;QAC9D,CAAC;QAIM,6DAA6B,GAApC,UAAqC,KAAU;YAC3C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,6BAA6B,CAAC,KAAK,CAAC,CAAC;QAC/D,CAAC;QAEM,2DAA2B,GAAlC,UAAmC,KAAU;YACzC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,2BAA2B,CAAC,KAAK,CAAC,CAAC;QAC7D,CAAC;QAEM,qDAAqB,GAA5B,UAA6B,KAAU,EAAE,KAAU;YAC/C,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC9D,CAAC;QAEM,2CAAW,GAAlB,UAAmB,IAAS;YACxB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC5C,CAAC;QAEL,4BAAC;IAAD,CAzLA,AAyLC,IAAA;IAED;QAAiC,sCAAiB;QAI9C;mBACI,kBAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;QAC7B,CAAC;QAEM,iCAAI,GAAX;YACI,UAAU,CAAC;YAEX,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC;gBACtB,IAAI,CAAC,QAAQ,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC;YACpD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;QACzB,CAAC;QACL,yBAAC;IAAD,CAfA,AAeC,CAfgC,iBAAiB,GAejD;IAED,OAAO;SACF,MAAM,CAAC,gBAAgB,EAAE,EAAE,CAAC;SAC5B,QAAQ,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC;AACvD,CAAC,CAAC,EAAE,CAAC;;;;;ACtnBL;IAAA;IAEA,CAAC;IAAD,qBAAC;AAAD,CAFA,AAEC,IAAA;AAFY,wCAAc;;;;;ACA3B;IAAA;IAEA,CAAC;IAAD,qBAAC;AAAD,CAFA,AAEC,IAAA;AAFY,wCAAc;;;ACC3B,OAAO,CAAC,MAAM,CAAC,SAAS,EAAE;IACtB,iBAAiB;IACjB,gBAAgB;IAChB,gBAAgB;CACnB,CAAC,CAAC;;;ACJH,CAAC;IAaG,IAAM,iBAAiB,GAAuB;QAC1C,QAAQ,EAAE,cAAc;QACxB,QAAQ,EAAE,aAAa;QACvB,KAAK,EAAE,UAAU;QACjB,UAAU,EAAE,GAAG;QACf,IAAI,EAAE,mBAAmB;QACzB,aAAa,EAAE,GAAG;QAClB,SAAS,EAAE,GAAG;KACjB,CAAA;IAGD;QAAA;QAUA,CAAC;QAAD,uBAAC;IAAD,CAVA,AAUC,IAAA;IAED;QA8BI,6BACW,QAAiC,EAChC,QAA4B,EACpC,MAAiB,EACjB,QAAQ,EACR,UAAgC,EAChC,SAAwC;YAN5C,iBA8BC;YA7BU,aAAQ,GAAR,QAAQ,CAAyB;YAChC,aAAQ,GAAR,QAAQ,CAAoB;YA3BhC,cAAS,GAAQ,EAAE,CAAC;YACpB,iBAAY,GAAQ,EAAE,CAAC;YAgC3B,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;YACtC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC;YACxH,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC;YAC5H,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC;YACpD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC;YAEtD,IAAI,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;YAC9B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,cAAc,EAAE,CAAC;YACrD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;YACvD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC;YAEhD,IAAI,CAAC,IAAI,EAAE,CAAC;YAEZ,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,GAAG,KAAK,CAAC;YAG/D,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,UAAC,QAAQ,EAAE,QAAQ;gBAC3C,EAAE,CAAC,CAAC,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC,CAAC,CAAC;oBACpC,KAAI,CAAC,IAAI,EAAE,CAAC;gBAChB,CAAC;YACL,CAAC,CAAC,CAAC;QAEP,CAAC;QAEM,wCAAU,GAAjB,UAAkB,OAAyB;YACvC,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;gBAC5C,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC;gBACtC,IAAI,CAAC,IAAI,EAAE,CAAC;YAChB,CAAC;QAeL,CAAC;QAEM,4CAAc,GAArB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACzB,IAAI,IAAI,SAAM,EAAE,SAAS,SAAQ,CAAC;gBAClC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACxD,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;gBACpD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBACrE,IAAI,CAAC,WAAW,EAAE,CAAC;gBACnB,IAAI,CAAC,UAAU,EAAE,CAAC;YACtB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,SAAS,EAAE,CAAC;YACrB,CAAC;YACD,IAAI,CAAC,QAAQ,EAAE,CAAC;QACpB,CAAC;QAEM,2CAAa,GAApB;YACI,IAAI,IAAU,EAAE,SAAiB,CAAC;YAClC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YACxD,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;YACpD,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;gBACrE,IAAI,CAAC,UAAU,EAAE,CAAC;gBAClB,IAAI,CAAC,WAAW,EAAE,CAAC;YACvB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,SAAS,EAAE,CAAC;YACrB,CAAC;YACD,IAAI,CAAC,QAAQ,EAAE,CAAC;QACpB,CAAC;QAAA,CAAC;QAEK,0CAAY,GAAnB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,UAAU,EAAE,CAAC;gBAClB,IAAI,CAAC,WAAW,EAAE,CAAC;YACvB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,SAAS,EAAE,CAAC;YACrB,CAAC;YACD,IAAI,CAAC,QAAQ,EAAE,CAAC;QACpB,CAAC;QAAA,CAAC;QAEK,mCAAK,GAAZ;YACI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC;QACjC,CAAC;QAAA,CAAC;QAEK,oCAAM,GAAb;YACI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC;QAClC,CAAC;QAAA,CAAC;QAEK,qCAAO,GAAd;YACI,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO;gBACxB,IAAI,CAAC,IAAI,KAAK,QAAQ;gBACtB,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC;QAChC,CAAC;QAAA,CAAC;QAEK,sCAAQ,GAAf;YAAA,iBAMC;YALG,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,QAAQ,CAAC;oBACV,KAAI,CAAC,UAAU,EAAE,CAAC;gBACtB,CAAC,EAAE,CAAC,CAAC,CAAC;YACV,CAAC;QACL,CAAC;QAAA,CAAC;QAEM,wCAAU,GAAlB;YACI,IAAI,CAAC,YAAY,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;YACjC,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACrC,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACnC,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;YACnC,IAAI,CAAC,YAAY,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC;YAC5C,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QACzC,CAAC;QAEO,uCAAS,GAAjB;YACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAChD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAClD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;YACpC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;QACjC,CAAC;QAEO,yCAAW,GAAnB;YACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAE1G,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;oBACvE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC;wBAClB,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;oBACpB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACJ,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;wBACf,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC;oBACnB,CAAC;oBACD,IAAI,CAAC,SAAS,EAAE,CAAC;gBACrB,CAAC;YACL,CAAC;QACL,CAAC;QAEO,kCAAI,GAAZ;YACI,IAAI,KAAW,CAAC;YAEhB,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;YACjD,IAAI,CAAC,GAAG,GAAG,KAAK,GAAG,KAAK,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC;YAC7C,IAAI,CAAC,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC;YACpD,IAAI,CAAC,IAAI,GAAG,KAAK,GAAG,KAAK,CAAC,cAAc,EAAE,GAAG,IAAI,CAAC;YAClD,IAAI,CAAC,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;YAEnF,IAAI,CAAC,SAAS,EAAE,CAAC;YAEjB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACzB,IAAI,CAAC,WAAW,EAAE,CAAC;YACvB,CAAC;YACD,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,IAAI,CAAC,QAAQ,EAAE,CAAC;QACpB,CAAC;QAEM,yCAAW,GAAlB;YACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC;YACjC,CAAC;QACL,CAAC;QAAA,CAAC;QAEK,0CAAY,GAAnB;YACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBACd,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC;YACnC,CAAC;QACL,CAAC;QAAA,CAAC;QAEK,wCAAU,GAAjB;YACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;YAC/B,CAAC;QACL,CAAC;QAAA,CAAC;QAGK,yCAAW,GAAlB,UAAmB,KAAa,EAAE,IAAY;YAC1C,IAAI,KAAK,GAAG,EAAE,CAAC;YAEf,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC5D,KAAK,GAAG,EAAE,CAAC;gBACX,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;YAED,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;gBACd,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACP,KAAK,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC;oBACjC,MAAM,CAAC,KAAK,CAAC;gBACjB,CAAC;gBACD,KAAK,GAAG,EAAE,CAAC;YACf,CAAC;YAED,MAAM,CAAC,KAAK,CAAC;QAEjB,CAAC;QAEO,qCAAO,GAAf,UAAgB,KAAa,EAAE,IAAY;YACvC,IAAI,KAAa,EAAE,IAAc,CAAC;YAElC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACtC,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;YACnB,IAAI,GAAG,EAAE,CAAC;YACV,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;gBACtC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACb,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YACrF,CAAC;YAED,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAEM,2CAAa,GAApB,UAAqB,GAAG,EAAE,KAAK,EAAE,IAAI;YACjC,IAAI,IAAU,EAAE,SAAiB,EAAE,SAAS,CAAC;YAE7C,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;YAC5C,SAAS,GAAG,IAAI,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;YAEpD,EAAE,CAAC,CAAC,SAAS,KAAK,CAAC,CAAC,CAAC,CAAC;gBAClB,SAAS,GAAG,GAAG,CAAC;YACpB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,SAAS,GAAG,GAAG,GAAG,CAAC,GAAG,SAAS,CAAC;YACpC,CAAC;YAED,MAAM,CAAC,SAAS,CAAC;QACrB,CAAC;QAEM,qCAAO,GAAd,UAAe,GAAW,EAAE,QAAgB,EAAE,iBAAiB;YAC3D,IAAI,MAAc,EAAE,QAAgB,CAAC;YAErC,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC;YAC3D,QAAQ,GAAG,GAAG,GAAG,CAAC,GAAG,GAAG,GAAG,iBAAiB,GAAG,GAAG,CAAC;YAEnD,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QACvE,CAAC;QAEM,sCAAQ,GAAf,UAAgB,KAAa,EAAE,IAAY;YACvC,IAAI,KAAY,EAAE,QAAgB,EAAE,iBAAyB,EAAE,SAAiB,CAAC;YAEjF,KAAK,GAAG,EAAE,CAAC;YACX,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YACzC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;YAEnD,iBAAiB,GAAG,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC;YACnG,OAAO,SAAS,GAAG,QAAQ,GAAG,CAAC,EAAE,CAAC;gBAC9B,KAAK,CAAC,IAAI,CAAC;oBACP,EAAE,EAAE,SAAS;oBACb,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,QAAQ,EAAE,iBAAiB,CAAC;iBAC7D,CAAC,CAAC;gBACH,SAAS,GAAG,SAAS,GAAG,CAAC,CAAC;YAC9B,CAAC;YAED,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAEO,uCAAS,GAAjB;YACI,IAAI,MAAM,GAAU,EAAE,CAAC;YAEvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBACnC,MAAM,CAAC,IAAI,CAAC;oBACR,EAAE,EAAE,CAAC;oBACL,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC;iBACjC,CAAC,CAAC;YACP,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QAEO,sCAAQ,GAAhB;YACI,IAAI,SAAiB,EAAE,OAAe,EAAE,KAAK,GAAU,EAAE,CAAC;YAE1D,MAAM,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACpB,KAAK,QAAQ;oBACT,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC;oBAC7B,OAAO,GAAG,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;oBACjC,KAAK,CAAC;gBACV,KAAK,MAAM;oBACP,SAAS,GAAG,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;oBACnC,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;oBAC3B,KAAK,CAAC;gBACV,KAAK,KAAK;oBACN,SAAS,GAAG,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;oBAClC,OAAO,GAAG,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC;oBACjC,KAAK,CAAC;gBACV;oBACI,SAAS,GAAG,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;oBAClC,OAAO,GAAG,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;oBAChC,KAAK,CAAC;YACd,CAAC;YACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAC7B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,SAAS,EAAE,CAAC,IAAI,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC;oBAChD,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAClB,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,OAAO,EAAE,CAAC,IAAI,SAAS,EAAE,CAAC,EAAE,EAAE,CAAC;oBAChD,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAClB,CAAC;YACL,CAAC;YAED,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAEO,uCAAS,GAAjB;YACI,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAE/C,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;gBAChB,KAAK,SAAS;oBACV,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;oBACb,KAAK,CAAC;gBACV,KAAK,QAAQ;oBACT,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;oBACf,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;oBACb,KAAK,CAAC;gBACV;oBACI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;wBACnC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;4BACzB,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC;wBAC3B,CAAC;oBACL,CAAC;oBACD,KAAK,CAAC;YACd,CAAC;YACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACrB,CAAC;QAEO,wCAAU,GAAlB;YACI,IAAI,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YACjD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YACrE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACvB,CAAC;QAEO,sCAAQ,GAAhB,UAAiB,CAAC;YACd,IAAI,KAAW,EAAE,GAAW,EAAE,KAAa,EAAE,IAAY,EAAE,IAAY,CAAC;YAExE,KAAK,GAAG,CAAC,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;YAE/B,GAAG,GAAG,KAAK,GAAG,KAAK,CAAC,UAAU,EAAE,GAAG,IAAI,CAAC;YACxC,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,WAAW,EAAE,GAAG,CAAC,GAAG,IAAI,CAAC;YAC/C,IAAI,GAAG,KAAK,GAAG,KAAK,CAAC,cAAc,EAAE,GAAG,IAAI,CAAC;YAC7C,IAAI,GAAG,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,IAAI,CAAC;YAE/D,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;gBACvF,MAAM,CAAC;YACX,CAAC;YAED,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;YACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YAGjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;YAChD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACtD,CAAC;QAEM,sCAAQ,GAAf;YACI,IAAI,KAAK,CAAC;YAEV,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;gBACzB,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBACnE,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,iBAAiB,EAAE,GAAG,KAAK,CAAC,CAAC;gBACtE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACvB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAClE,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,iBAAiB,EAAE,GAAG,KAAK,CAAC,CAAC;gBACtE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACvB,CAAC;YAED,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAChD,IAAI,CAAC,UAAU,EAAE,CAAC;YAClB,IAAI,CAAC,QAAQ,EAAE,CAAC;QACpB,CAAC;QAEL,0BAAC;IAAD,CAtZA,AAsZC,IAAA;IAED,IAAM,SAAS,GAAyB;QACpC,QAAQ,EAAE,iBAAiB;QAC3B,WAAW,EAAE,2BAA2B;QACxC,UAAU,EAAE,mBAAmB;KAElC,CAAC;IACF,OAAO;SACF,MAAM,CAAC,cAAc,EAAE,CAAC,oBAAoB,CAAC,CAAC;SAC9C,SAAS,CAAC,cAAc,EAAE,SAAS,CAAC,CAAA;AAC7C,CAAC,CAAC,EAAE,CAAC;;;ACtcL,CAAC;IACG,yBAAyB,SAAwC;QAC7D,IAAI,YAAY,GAAQ,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC;cAC/C,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;QAE3C,MAAM,CAAC,UAAC,GAAW;YACf,MAAM,CAAC,YAAY,GAAI,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,GAAG,CAAC;QACpE,CAAC,CAAA;IACL,CAAC;IAED,OAAO;SACF,MAAM,CAAC,oBAAoB,EAAE,EAAE,CAAC;SAChC,MAAM,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;AAC9C,CAAC;;;ACbD,OAAO,CAAC,MAAM,CAAC,UAAU,EAAE;IACvB,SAAS;IACT,SAAS;IACT,cAAc;IACd,kBAAkB;IAClB,cAAc;IACd,oBAAoB;CACvB,CAAC,CAAC;;;ACNH,CAAC;IACG;QAAA;QAGA,CAAC;QAAD,oBAAC;IAAD,CAHA,AAGC,IAAA;IASD,IAAM,iBAAiB,GAAuB;QAC1C,KAAK,EAAE,eAAe;QACtB,GAAG,EAAE,aAAa;KACrB,CAAA;IAED;QAAA;QAKA,CAAC;QAAD,uBAAC;IAAD,CALA,AAKC,IAAA;IAED;QAKI,6BAAY,MAAiB,EAAE,MAAsB,EAAE,QAAgB;YACnE,IAAI,CAAC,IAAI,GAAG,IAAI,aAAa,EAAE,CAAC;YAChC,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,aAAa,EAAE,CAAC;YAErB,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;QACxC,CAAC;QAEM,wCAAU,GAAjB,UAAkB,OAAyB;YACvC,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;gBAC9C,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBACvB,IAAI,CAAC,eAAe,EAAE,CAAC;YAC3B,CAAC;YACD,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,IAAI,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;gBAC1C,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,aAAa,EAAE,CAAC;YACzB,CAAC;QACL,CAAC;QAEO,yCAAW,GAAnB,UAAoB,KAAU;YAC1B,MAAM,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;QAC1C,CAAC;QAEO,6CAAe,GAAvB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC;gBAClD,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK;sBAC7C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC;QACL,CAAC;QAEO,2CAAa,GAArB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,IAAI,IAAI,IAAI,CAAC,GAAG,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC9C,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG;sBACvC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACrC,CAAC;QACL,CAAC;QAEO,uCAAS,GAAjB,UAAkB,KAAK;YACnB,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;gBAAC,MAAM,CAAC,KAAK,CAAC;YAChC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;gBAAC,MAAM,CAAC,KAAK,CAAC;YACzB,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;YACvC,MAAM,CAAC,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,MAAM,CAAC;QAC3C,CAAC;QACL,0BAAC;IAAD,CAhDA,AAgDC,IAAA;IAED,IAAM,kBAAkB,GAAyB;QAC7C,QAAQ,EAAE,iBAAiB;QAC3B,WAAW,EAAE,2BAA2B;QACxC,UAAU,EAAE,mBAAmB;KAClC,CAAA;IAED,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,EAAE,CAAC;SAC7B,SAAS,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;AAEvD,CAAC,CAAC,EAAE,CAAC;;;;;ACrFQ,QAAA,iBAAiB,GAAG,EAAE,CAAC;AACvB,QAAA,aAAa,GAAG,EAAE,CAAC;AACnB,QAAA,UAAU,GAAG,EAAE,CAAC;AAChB,QAAA,oBAAoB,GAAG,IAAI,CAAC;AAEzC,CAAC;IACG;QAAA;YAMI,SAAI,GAAY,KAAK,CAAC;QAC1B,CAAC;QAAD,0BAAC;IAAD,CAPA,AAOC,IAAA;IAgBD,IAAM,qBAAqB,GAA2B;QAClD,YAAY,EAAE,GAAG;QACjB,UAAU,EAAE,GAAG;QACf,UAAU,EAAE,GAAG;QACf,aAAa,EAAE,GAAG;QAClB,WAAW,EAAE,GAAG;QAChB,QAAQ,EAAE,aAAa;QACvB,WAAW,EAAE,GAAG;QAChB,OAAO,EAAE,GAAG;KACf,CAAA;IAED;QAAA;QAWA,CAAC;QAAD,2BAAC;IAAD,CAXA,AAWC,IAAA;IAGD;QAiBI,iCACY,SAAwC,EACxC,cAAc,EACd,MAAiB,EACzB,QAAgB;YAHR,cAAS,GAAT,SAAS,CAA+B;YACxC,mBAAc,GAAd,cAAc,CAAA;YACd,WAAM,GAAN,MAAM,CAAW;YAnBtB,eAAU,GAAW,YAAY,CAAC;YAClC,aAAQ,GAAW,UAAU,CAAC;YAqBjC,IAAI,CAAC,SAAS,EAAE,CAAC;YACjB,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;YACrD,IAAI,CAAC,IAAI,GAAG,IAAI,mBAAiB,EAAE,CAAC;YACpC,IAAI,CAAC,QAAQ,EAAE,CAAC;YAChB,IAAI,CAAC,UAAU,EAAE,CAAC;YAGlB,QAAQ,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC;QAC7C,CAAC;QAEM,4CAAU,GAAjB,UAAkB,OAA6B;YAC3C,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,IAAI,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC,CAAC;gBAC5D,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC;gBACtD,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAChB,IAAI,CAAC,UAAU,EAAE,CAAC;YACtB,CAAC;YACD,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU,IAAI,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;gBACxD,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC;gBAClD,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAChB,IAAI,CAAC,UAAU,EAAE,CAAC;YACtB,CAAC;QAEL,CAAC;QAEO,2CAAS,GAAjB;YACI,IAAI,YAAY,GAAQ,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;YAEvG,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBACf,YAAY,CAAC,eAAe,CAAC,IAAI,EAAE;oBAC/B,oBAAoB,EAAE,YAAY;oBAClC,kBAAkB,EAAE,UAAU;iBACjC,CAAC,CAAC;gBACH,YAAY,CAAC,eAAe,CAAC,IAAI,EAAE;oBAC/B,oBAAoB,EAAE,QAAQ;oBAC9B,kBAAkB,EAAE,OAAO;iBAC9B,CAAC,CAAC;gBACH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC;sBAC3E,YAAY,CAAC,SAAS,CAAC,sBAAsB,CAAC,CAAC;gBACrD,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC;sBACrE,YAAY,CAAC,SAAS,CAAC,oBAAoB,CAAC,CAAC;YACvD,CAAC;QACL,CAAC;QAEO,6CAAW,GAAnB,UAAoB,KAAU;YAC1B,MAAM,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;QAC1C,CAAC;QAEO,6CAAW,GAAnB;YACI,IAAI,KAAK,EAAE,GAAG,CAAC;YAEf,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC7C,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;YAED,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,qBAAa,GAAG,4BAAoB,CAAC,CAAC;YAC7G,GAAG,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,qBAAa,GAAG,4BAAoB,CAAC,CAAC;YAEvG,MAAM,CAAC,GAAG,GAAG,KAAK,CAAC;QACvB,CAAC;QAEO,mDAAiB,GAAzB;YACI,IAAI,IAAU,EAAE,KAAW,EAAE,GAAS,EAAE,OAAe,EAAE,SAAiB,CAAC;YAE3E,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;gBAE3B,MAAM,CAAC;YACX,CAAC;YAGD,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;gBACtE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;oBACrB,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC;oBACnB,SAAS,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBAClE,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,yBAAiB,GAAG,qBAAa,GAAG,4BAAoB,CAAC,CAAC,GAAG,yBAAiB,CAAC;gBACjI,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,yBAAiB,CAAC;gBAC9F,CAAC;YACL,CAAC;YAED,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,qBAAa,GAAG,4BAAoB,CAAC,CAAC;YAG7G,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACrB,GAAG,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACrD,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;gBACxD,OAAO,GAAG,GAAG,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBACtD,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,yBAAiB,GAAG,qBAAa,GAAG,4BAAoB,CAAC,CAAC,GAAG,yBAAiB,CAAC;YAC7H,CAAC;YAAC,IAAI,CAAC,CAAC;gBAEJ,GAAG,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,qBAAa,GAAG,4BAAoB,CAAC,CAAC;gBACvG,EAAE,CAAC,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC,CAAC;oBAEf,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,CAAC,yBAAiB,GAAG,qBAAa,GAAG,4BAAoB,CAAC,CAAC,CAAC,CAAC;oBAC3I,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,yBAAiB,CAAC,GAAG,CAAC,kBAAU,GAAG,qBAAa,CAAC,CAAC;gBACjG,CAAC;YACL,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,yBAAiB,CAAC,GAAG,yBAAiB,CAAC;QAClG,CAAC;QAGO,iDAAe,GAAvB;YACI,IAAI,IAAS,EAAE,KAAW,EAAE,GAAS,CAAC;YAEtC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;gBAEzB,MAAM,CAAC;YACX,CAAC;YAGD,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAClE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;oBACvB,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;oBAClB,IAAI,GAAG,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;oBAC7D,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC,yBAAiB,GAAG,qBAAa,GAAG,4BAAoB,CAAC,CAAC,GAAG,yBAAiB,CAAC;gBAC1H,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACJ,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,KAAK,CAAC,kBAAU,GAAG,qBAAa,GAAG,yBAAiB,CAAC,GAAG,CAAC,kBAAU,GAAG,qBAAa,GAAG,yBAAiB,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,yBAAiB,CAAC;gBAC9L,CAAC;YACL,CAAC;YAED,KAAK,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,qBAAa,GAAG,4BAAoB,CAAC,CAAC;YAC7G,GAAG,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,qBAAa,GAAG,4BAAoB,CAAC,CAAC;YAEvG,EAAE,CAAC,CAAC,KAAK,IAAI,GAAG,CAAC,CAAC,CAAC;gBAEf,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,yBAAiB,GAAG,qBAAa,GAAG,4BAAoB,CAAC,CAAC,CAAC;gBACzI,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,kBAAU,GAAG,qBAAa,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAU,GAAG,qBAAa,GAAG,yBAAiB,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,yBAAiB,CAAC;YAC5K,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,yBAAiB,CAAC,GAAG,yBAAiB,CAAC;YAC1F,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC5C,CAAC;QAEO,yCAAO,GAAf;YACI,IAAI,IAAY,CAAC;YAEjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;gBAAC,IAAI,CAAC,IAAI,GAAG,IAAI,mBAAiB,EAAE,CAAC;YACpD,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;YAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACtB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,qBAAa,GAAG,4BAAoB,GAAG,CAAC,CAAC;gBAC5F,IAAI,CAAC,YAAY,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;YACvE,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACpB,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,qBAAa,GAAG,4BAAoB,GAAG,CAAC,CAAC;gBACxF,IAAI,CAAC,UAAU,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;YACnE,CAAC;YAED,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAC1B,CAAC;QAEO,4CAAU,GAAlB;YACI,IAAI,KAAW,EAAE,GAAS,CAAC;YAE3B,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,KAAK,IAAI,IAAI,IAAI,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC;gBAChE,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;gBAE/D,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACT,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAChD,CAAC;gBAED,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBAC5D,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,CAAM,IAAI,IAAI,CAAC,KAAK,CAAC,GAAQ,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,qBAAa,GAAG,4BAAoB,CAAC,CAAC;YACrH,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,KAAK,IAAI,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC;gBAC5D,GAAG,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;gBAEzD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;oBACT,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAC5C,CAAC;gBAED,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;gBACxD,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,CAAM,IAAI,IAAI,CAAC,GAAG,CAAC,GAAQ,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAa,GAAG,4BAAoB,CAAC,CAAC;YAC/G,CAAC;YAED,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YACxC,IAAI,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC;QAEO,iDAAe,GAAvB;YACI,IAAI,MAAM,EAAE,OAAe,CAAC;YAE5B,MAAM,GAAG,EAAE,CAAC;YACZ,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAClC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAW,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;oBACjC,OAAO,GAAG,CAAC,GAAG,yBAAiB,CAAC;oBAChC,MAAM,CAAC,IAAI,CAAC;wBACR,EAAE,EAAE,CAAC,GAAG,qBAAa,GAAG,OAAO;wBAC/B,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC;qBAC3F,CAAC,CAAC;gBACP,CAAC;YACL,CAAC;YAED,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QAEO,2CAAS,GAAjB,UAAkB,KAAU;YACxB,EAAE,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC;gBAAC,MAAM,CAAC,KAAK,CAAC;YAChC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;gBAAC,MAAM,CAAC,KAAK,CAAC;YACzB,KAAK,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,WAAW,EAAE,CAAC;YACvC,MAAM,CAAC,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,MAAM,CAAC;QAC3C,CAAC;QAEO,0CAAQ,GAAhB;YACI,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YAC3B,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YAC1B,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACtD,CAAC;QAEM,mDAAiB,GAAxB,UAAyB,IAAI;YACzB,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YACxC,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACxD,CAAC;QAAA,CAAC;QAEK,iDAAe,GAAtB;YACI,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YACxC,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACxD,CAAC;QAAA,CAAC;QAEK,mDAAiB,GAAxB;YACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;YACrE,CAAC;YACD,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACzB,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YACxC,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACxD,CAAC;QAAA,CAAC;QAEK,iDAAe,GAAtB;YACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;YACnE,CAAC;YAED,IAAI,CAAC,eAAe,EAAE,CAAC;YACvB,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;YACxC,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACxD,CAAC;QAAA,CAAC;QAEK,4CAAU,GAAjB;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAChB,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YAC3B,CAAC;YAED,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAAA,CAAC;QAEN,8BAAC;IAAD,CA5RA,AA4RC,IAAA;IAED,IAAM,sBAAsB,GAAyB;QACjD,QAAQ,EAAE,qBAAqB;QAC/B,WAAW,EAAE,oCAAoC;QACjD,UAAU,EAAE,uBAAuB;KACtC,CAAC;IACF,OAAO,CAAC,MAAM,CAAC,kBAAkB,EAAE,EAAE,CAAC;SACjC,SAAS,CAAC,kBAAkB,EAAE,sBAAsB,CAAC,CAAA;AAE9D,CAAC;;;AC5VD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"pip-webui-dates.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\n(() => {\n    interface IDateBindings {\n        [key: string]: any;\n\n        timeMode: any,\n        disabled: any,\n        model: any,\n        ngChange: any\n    }\n\n    const DateBindings: IDateBindings = {\n        timeMode: '@pipTimeMode',\n        disabled: '&ngDisabled',\n        model: '<ngModel',\n        ngChange: '<'\n    }\n\n    class DateChanges implements ng.IOnChangesObject, IDateBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        timeMode: ng.IChangesObject<string>;\n        disabled: ng.IChangesObject<() => boolean>;\n        model: ng.IChangesObject<Date>;\n        ngChange: ng.IChangesObject<(date: Date) => void>;\n    }\n\n\n    class DateController {\n        private value: any;\n        private localeDate: moment.MomentLanguageData = moment.localeData();\n        private momentMonths: any[];\n        private momentDays: any[];\n        private momentShortDays: any;\n        private momentFirstDayOfWeek: any;\n\n        public timeMode: string;\n        public day: number;\n        public month: number;\n        public year: number;\n\n        public model: Date;\n        public ngChange: (date: Date) => void;\n\n        public days: number[];\n        public months: any[];\n        public years: number[];\n        public disabled: () => boolean;\n        public disableControls: boolean;\n\n        constructor(\n            $injector: angular.auto.IInjectorService,\n            $scope: ng.IScope) {\n            this.momentMonths = angular.isArray(this.localeDate['_months']) ? this.localeDate['_months'] : this.localeDate['_months'].format;\n            this.momentDays = angular.isArray(this.localeDate['_weekdays']) ? this.localeDate['_weekdays'] : this.localeDate['_weekdays'].format;\n            this.momentShortDays = this.localeDate['_weekdaysMin'];\n            this.momentFirstDayOfWeek = this.localeDate['_week'].dow;\n\n            let value = this.model ? _.isDate(this.model) ? this.model : new Date(this.model) : null;\n            this.day = value ? value.getDate() : null;\n            this.month = value ? value.getMonth() + 1 : null;\n            this.year = value ? value.getFullYear() : null;\n\n            this.days = this.dayList(this.month, this.year);\n            this.months = this.monthList();\n            this.years = this.yearList();\n\n            this.disableControls = this.disabled ? this.disabled() : false;\n\n        }\n\n        public $onChanges(changes: DateChanges) {\n            if (changes.model && changes.model.currentValue) {\n                this.model = changes.model.currentValue;\n                this.getValue(this.model);\n            }\n        }\n\n        private dayList(month: number, year: number): number[] {\n            let count: number = 31, days: number[] = [];\n\n            if (month === 4 || month === 6 || month === 9 || month === 11) {\n                count = 30;\n            } else {\n                if (month === 2) {\n                    if (year) {\n                        // Calculate leap year (primitive)\n                        count = year % 4 === 0 ? 29 : 28;\n                    } else {\n                        count = 28;\n                    }\n                }\n            }\n            for (let i: number = 1; i <= count; i++) {\n                days.push(i);\n            }\n\n            return days;\n        }\n\n        private monthList() {\n            let months: any[] = [];\n\n            for (let i: number = 1; i <= 12; i++) {\n                months.push({\n                    id: i,\n                    name: this.momentMonths[i - 1]\n                });\n            }\n\n            return months;\n        }\n\n        private yearList(): number[] {\n            let currentYear: number = new Date().getFullYear(),\n                startYear: number = this.timeMode === 'future' ? currentYear : currentYear - 100,\n                endYear: number = this.timeMode === 'past' ? currentYear : currentYear + 100,\n                years = [];\n\n            if (this.timeMode === 'past') {\n                for (let i: number = endYear; i >= startYear; i--) {\n                    years.push(i);\n                }\n            } else {\n                for (let i: number = startYear; i <= endYear; i++) {\n                    years.push(i);\n                }\n            }\n\n            return years;\n        }\n\n        private adjustDay() {\n            let days = this.dayList(this.month, this.year);\n\n            if (this.days.length !== days.length) {\n                if (this.day > days.length) {\n                    this.day = days.length;\n                }\n\n                this.days = days;\n            }\n        }\n\n        private getValue(v: any) {\n            let value: Date = v ? _.isDate(v) ? v : new Date(v) : null,\n                day: number = value ? value.getDate() : null,\n                month: number = value ? value.getMonth() + 1 : null,\n                year: number = value ? value.getFullYear() : null;\n\n            // Update day list if month and year were changed\n            if (this.month !== month && this.year !== year) {\n                this.days = this.dayList(this.month, this.year);\n            }\n\n            // Assign values to scope\n            this.day = day;\n            this.month = month;\n            this.year = year;\n        }\n\n        public setValue() {\n            let value: Date;\n\n            if (this.day && this.month && this.year) {\n                value = new Date(this.year, this.month - 1, this.day, 0, 0, 0, 0);\n                this.model = value;\n                this.ngChange(this.model);\n            }\n        }\n\n        public onMonthChanged() {\n            this.adjustDay();\n            this.setValue();\n        }\n\n        public onYearChanged() {\n            this.adjustDay();\n            this.setValue();\n        }\n    }\n\n    const DateComponent: ng.IComponentOptions = {\n        bindings: DateBindings,\n        templateUrl: 'date/Date.html',\n        controller: DateController\n    }\n\n    angular\n        .module('pipDate', ['pipDates.Templates'])\n        .component('pipDate', DateComponent)\n})();\n\n","import { DateTimeConfig, IDateConvertService, IDateConvertProvider } from './IDateConvertService';\n\n(() => {\n    class DateTimeConvert implements IDateConvertService {\n        private _config: DateTimeConfig;\n        protected _momentRanged: string[] = new Array('year', 'month', 'week', 'isoweek', 'day');\n        protected _defaultFormat: string = 'LL'\n\n        private isUndefinedOrNull(value: any): boolean {\n            return angular.isUndefined(value) || value === null;\n        }\n\n        private getRange(value: string): string {\n            if (this.isUndefinedOrNull(value)) {\n                return 'day';\n            }\n\n            let index = this._momentRanged.indexOf(value)\n\n            if (index < 0) {\n                return 'day'\n            }\n            return this._momentRanged[index];\n        }\n\n        private getOperationRange(value: string): string {\n            if (this.isUndefinedOrNull(value)) {\n                return 'day';\n            }\n\n            let range = value == 'isoweek' ? 'week' : value,\n                index = this._momentRanged.indexOf(range)\n\n            if (index < 0) {\n                return 'day'\n            }\n            return this._momentRanged[index];\n\n        }\n\n        private formatDateTime(value: any, basicFormat: string): string {\n            let date: moment.Moment,\n                formatTpl: string;\n\n            if (this.isUndefinedOrNull(value)) {\n                return '';\n            }\n\n            if (this._config.timeZone != undefined && this._config.timeZone != null) {\n                date = moment(value).utcOffset(this._config.timeZone);\n            } else {\n                date = moment(value);\n            }\n\n            if (!date.isValid()) {\n                return '';\n            }\n\n            formatTpl = basicFormat ? basicFormat : this._defaultFormat;\n\n            return date.format(formatTpl);\n        }\n\n        private formatDateTimeY(value: any, basicFormat: string): string {\n            let date: moment.Moment,\n                nowDate: moment.Moment,\n                formatMoment: string;\n\n            if (this.isUndefinedOrNull(value)) {\n                return '';\n            }\n\n            if (this._config.timeZone != undefined && this._config.timeZone != null) {\n                date = moment(value).utcOffset(this._config.timeZone);\n            } else {\n                date = moment(value);\n            }\n\n            if (!date.isValid()) {\n                return '';\n            }\n\n            nowDate = moment();\n            formatMoment = moment.localeData().longDateFormat(basicFormat ? basicFormat : this._defaultFormat);\n\n            if (nowDate.year() == date.year()) {\n                formatMoment = formatMoment.replace(/Y/g, '').replace(/^\\W|\\W$|\\W\\W/, '');\n            }\n\n            return date.format(formatMoment);\n        }\n\n        private formatDay(value: any, basicFormat: string): string {\n            let date: moment.Moment,\n                format = moment.localeData().longDateFormat(basicFormat ? basicFormat : this._defaultFormat),\n                formatMonthYearless = format.replace(/Y/g, '').replace(/^\\W|\\W$|\\W\\W/, '').replace(/M/g, '');\n\n            if (this.isUndefinedOrNull(value)) {\n                return '';\n            }\n\n            if (this._config.timeZone != undefined && this._config.timeZone != null) {\n                date = moment(value).utcOffset(this._config.timeZone);\n            } else {\n                date = moment(value);\n            }\n\n            if (!date.isValid()) {\n                return '';\n            }\n\n            return date.format(formatMonthYearless);\n        }\n\n        private formatMonthDay(value: any, basicFormat: string): string {\n            let date: moment.Moment,\n                format = basicFormat ? basicFormat : this._defaultFormat,\n                formatLL = moment.localeData().longDateFormat(format),\n                formatYearlessLL = formatLL.replace(/Y/g, '').replace(/^\\W|\\W$|\\W\\W/, '');\n\n            if (this.isUndefinedOrNull(value)) {\n                return '';\n            }\n\n            if (this._config.timeZone != undefined && this._config.timeZone != null) {\n                date = moment(value).utcOffset(this._config.timeZone);\n            } else {\n                date = moment(value);\n            }\n\n            if (!date.isValid()) {\n                return '';\n            }\n\n            return date.format(formatYearlessLL);\n        }\n\n        //  use timezone not testing\n        private formatRange(value1: any, value2: any, basicFormat: string): string {\n            let dateStart: moment.Moment,\n                dateEnd: moment.Moment,\n                format = basicFormat ? basicFormat : this._defaultFormat;\n\n            if (this.isUndefinedOrNull(value1)) {\n                dateStart = null;\n            } else {\n                dateStart = (this._config.timeZone != undefined && this._config.timeZone != null) ? moment(value1).utcOffset(this._config.timeZone) : moment(value1);\n            }\n            if (this.isUndefinedOrNull(value2)) {\n                dateEnd = null;\n            } else {\n                dateEnd = (this._config.timeZone != undefined && this._config.timeZone != null) ? moment(value2).utcOffset(this._config.timeZone) : moment(value2);\n            }\n\n            if (dateStart === null && dateEnd === null) return '';\n\n            if (dateStart === null) {\n                return dateEnd.format(basicFormat);\n            }\n            if (dateEnd === null || dateStart.isSame(dateEnd)) {\n                return dateStart.format(basicFormat);;\n            }\n\n            if (dateStart.isAfter(dateEnd)) {\n                // todo localization\n                throw new Error('Date range error. Start date is more than end date.');\n            }\n\n            if (dateStart.year() == dateEnd.year()) {\n                if (dateStart.month() == dateEnd.month()) {\n                    return this.formatDay(dateStart, basicFormat) + '-' + dateEnd.format(basicFormat);\n                }\n                return this.formatMonthDay(dateStart, basicFormat) + '-' + dateEnd.format(basicFormat);\n\n            }\n            return dateStart.format(basicFormat) + '-' + dateEnd.format(basicFormat);\n\n        }\n\n        private toStartRange(value: any, range: string): Date {\n            let date: moment.Moment;\n\n            if (this.isUndefinedOrNull(value)) {\n                throw new Error('toStartRange - value is undefined or null');\n            }\n\n            if (this._config.timeZone != undefined && this._config.timeZone != null) {\n                date = moment(value).utcOffset(this._config.timeZone);\n            } else {\n                date = moment(value);\n            }\n            if (!date.isValid()) {\n                throw new Error('toStartRange - date is invalid');\n            }\n\n            return date.startOf(range).toDate();\n        }\n\n        private toEndRange(value: any, range: string, offset: number): any {\n            let date: any,\n                result: any,\n                mssOffset: number;\n\n            if (this.isUndefinedOrNull(value)) {\n                return '';\n            }\n\n            if (!angular.isNumber(offset)) {\n                mssOffset = 0;\n            }\n\n            if (this._config.timeZone != undefined && this._config.timeZone != null) {\n                date = moment(value).utcOffset(this._config.timeZone);\n            } else {\n                date = moment(value);\n            }\n            if (!date.isValid()) {\n                return '';\n            }\n\n            if (mssOffset) {\n                result = date.startOf(range).add(mssOffset, 'milliseconds');\n            } else {\n                result = date.startOf(range);\n            }\n\n            return date.startOf(range).toDate();\n        }\n\n        private toDateWithTime(value: any, formatDate: string, formatTime: string, firstTime?: boolean): any {\n            let date: moment.Moment,\n                result: string,\n                nowDate: moment.Moment;\n\n            if (this.isUndefinedOrNull(value)) {\n                return '';\n            }\n\n            if (this._config.timeZone != undefined && this._config.timeZone != null) {\n                date = moment(value).utcOffset(this._config.timeZone);\n            } else {\n                date = moment(value);\n            }\n            if (!date.isValid()) {\n                return '';\n            }\n\n            nowDate = moment();\n            if (firstTime) {\n                result = date.format(formatTime) + ' ' + date.format(formatDate);\n            } else {\n                result = date.format(formatDate) + ' ' + date.format(formatTime);\n            }\n\n            return result;\n        }\n\n        private toTodayDate(value: any, formatDate: string, formatTime: string): any {\n            let date: moment.Moment,\n                result: string,\n                nowDate: any;\n\n            if (this.isUndefinedOrNull(value)) {\n                return '';\n            }\n\n            if (this._config.timeZone != undefined && this._config.timeZone != null) {\n                date = moment(value).utcOffset(this._config.timeZone);\n            } else {\n                date = moment(value);\n            }\n            if (!date.isValid()) {\n                return '';\n            }\n\n            nowDate = moment();\n\n            if (nowDate.year() == date.year() && nowDate.month() == date.month() && nowDate.day() == date.day()) {\n                result = date.format(formatTime);\n            } else {\n                result = date.format(formatDate) + ' ' + date.format(formatTime);\n            }\n\n            return result;\n        }\n\n        public constructor(config: DateTimeConfig) {\n            this._config = config || { timeZone: null };\n        };\n\n        public get config(): DateTimeConfig {\n            return this._config;\n        }\n\n        public useTimeZone(offset: number) {\n            this._config.timeZone = offset;\n        }\n        \n      \n\n        public getDateJSON(date: any): string {\n            return JSON.stringify(moment(date));\n        }\n\n        // navigation functions \n        // ------------------\n\n        public getNextStart(value: any, category: string): any {\n            let date: moment.Moment,\n                range: string,\n                result: any;\n\n            if (this.isUndefinedOrNull(value)) {\n                return '';\n            }\n\n            date = moment(value);\n            if (!date.isValid()) {\n                return '';\n            }\n\n            range = this.getRange(category);\n            result = moment(date).startOf(range).add(this.getOperationRange(range));\n\n            return result.toDate();\n        }\n\n        public getPrevStart(value: any, category: string): Date {\n            let date: moment.Moment,\n                range: string,\n                result: moment.Moment;\n\n            if (this.isUndefinedOrNull(value)) {\n                throw new Error('getPrevStart - value is undefined or null');\n            }\n\n            date = moment(value);\n            if (!date.isValid()) {\n                throw new Error('getPrevStart - date is invalid');\n            }\n\n            range = this.getRange(category);\n            result = moment(date).startOf(range).add(-1, this.getOperationRange(range));\n\n            return result.toDate();\n        }\n\n        public getNowStart(category: string): Date {\n            let date: moment.Moment,\n                range: string,\n                result: moment.Moment;\n\n            date = moment();\n            if (!date.isValid()) {\n                throw new Error('getNowStart - date is invalid');\n            }\n\n            range = this.getRange(category)\n            result = moment(date).startOf(range);\n\n            return result.toDate();\n        }\n\n        public addHours(value: any, hours: number): Date {\n            let date: moment.Moment;\n\n            if (this.isUndefinedOrNull(value) || !angular.isNumber(hours)) {\n                throw new Error('addHours - value is undefined or null or hours is not a number');\n            }\n\n            date = moment(value);\n            if (!date.isValid()) {\n                throw new Error('addHours - date is invalid');\n            }\n\n            return date.add(hours, 'hours').toDate();\n        }\n\n        public toStartDay(value: any): Date {\n            return this.toStartRange(value, 'day');\n        }\n\n        public toEndDay(value: any, offset: number): Date {\n            return this.toEndRange(value, 'day', offset);\n        }\n\n        public toStartWeek(value: any): Date {\n            return this.toStartRange(value, 'week');\n        }\n\n        public toEndWeek(value: any, offset: number): Date {\n            return this.toEndRange(value, 'week', offset);\n        }\n\n        public toStartMonth(value: any): Date {\n            return this.toStartRange(value, 'month');\n        }\n\n        public toEndMonth(value: any, offset: number): Date {\n            return this.toEndRange(value, 'month', offset);\n        }\n\n        public toStartYear(value: any): Date {\n            return this.toStartRange(value, 'year');\n        }\n\n        public toEndYear(value: any, offset: number): Date {\n            return this.toEndRange(value, 'year', offset);\n        }\n\n    }\n\n    class DateTimeConvertService {\n        private _datetime: DateTimeConvert;\n        private _config: DateTimeConfig;\n\n        public constructor(\n            datetime: DateTimeConvert,\n        ) {\n            this._config = { timeZone: null };\n            this._datetime = datetime;\n        }\n\n        // todo Optional\n        public useTimeZone(offset: number): void {\n            return this._datetime.useTimeZone(offset);\n        }\n\n     \n\n        public getDateJSON(date: any): string {\n            return this._datetime.getDateJSON(date);\n        }\n\n        // navigation functions \n        // ------------------\n\n        public getNextStart(value: any, category: string): any {\n            return this._datetime.getNextStart(value, category);\n        }\n\n        public getPrevStart(value: any, category: string): any {\n            return this._datetime.getPrevStart(value, category);\n        }\n\n        public getNowStart(category: string): any {\n            return this._datetime.getNowStart(category);\n        }\n\n        public addHours(value: any, hours: number): any {\n            return this._datetime.addHours(value, hours);\n        }\n\n        public toStartDay(value: any): any {\n            return this._datetime.toStartDay(value);\n        }\n\n        public toEndDay(value: any, offset: number): any {\n            return this._datetime.toEndDay(value, offset);\n        }\n\n        public toStartWeek(value: any): any {\n            return this._datetime.toStartWeek(value);\n        }\n\n        public toEndWeek(value: any, offset: number): any {\n            return this._datetime.toEndWeek(value, offset);\n        }\n\n        public toStartMonth(value: any): any {\n            return this._datetime.toStartMonth(value);\n        }\n\n        public toEndMonth(value: any, offset: number): any {\n            return this._datetime.toEndMonth(value, offset);\n        }\n\n        public toStartYear(value: any): any {\n            return this._datetime.toStartYear(value);\n        }\n\n        public toEndYear(value: any, offset: number): any {\n            return this._datetime.toEndYear(value, offset);\n        }\n\n    }\n\n    class DateConvertProvider extends DateTimeConvert implements IDateConvertProvider {\n        private _translation: DateTimeConvert;\n        private _service: DateTimeConvertService;\n\n        public constructor() {\n            super({ timeZone: null });\n        }\n\n        public $get(): any {\n            \"ngInject\";\n\n            if (this._service == null)\n                this._service = new DateTimeConvertService(this);\n            return this._service;\n        }\n    }\n\n    angular\n        .module('pipDate.Convert', [])\n        .provider('pipDateConvert', DateConvertProvider);\n})();","import { IDateFormatService } from './IDateFormatService';\nimport { IDateConvertService } from './IDateConvertService';\n\nfunction formatTimeFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any, format: string): string => {\n        return pipDateFormat.formatTime(value, format);\n    }\n}\n\nfunction formatDateOptionalFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any, format: string): string => {\n        return pipDateFormat.formatDateOptional(value, format);\n    }\n}\n\nfunction formatLongDateFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatLongDate(value);\n    }\n}\n\nfunction formatShortDateFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatShortDate(value);\n    }\n}\n\nfunction formatMiddleDateFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatMiddleDate(value);\n    }\n}\n\nfunction formatMonthFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any) => {\n        return pipDateFormat.formatMonth(value);\n    }\n}\n\nfunction formatLongMonthFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatLongMonth(value);\n    }\n}\n\nfunction formatYearFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatYear(value);\n    }\n}\n\nfunction formatWeekFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatWeek(value);\n    }\n}\n\nfunction formatShortWeekFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatShortWeek(value);\n    }\n}\n\nfunction formatShortDateTimeFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatShortDateTime(value);\n    }\n}\n\nfunction formatMiddleDateTimeFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatMiddleDateTime(value);\n    }\n}\n\nfunction formatLongDateTimeFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatLongDateTime(value);\n    }\n}\n\nfunction formatShortDateLongTimeFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any, firstTime: boolean): string => {\n        return pipDateFormat.formatShortDateLongTime(value, firstTime);\n    }\n}\n\nfunction formatMiddleDateLongTimeFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any, firstTime: boolean): string => {\n        return pipDateFormat.formatMiddleDateLongTime(value, firstTime);\n    }\n}\n\nfunction formatLongDateLongTimeFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any, firstTime: boolean): string => {\n        return pipDateFormat.formatLongDateLongTime(value, firstTime);\n    }\n}\n\nfunction bbFormatDateLongTimeFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any, firstTime: boolean): string => {\n        return pipDateFormat.bbFormatDateLongTime(value, firstTime);\n    }\n}\n\nfunction formatFullDateTimeFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatFullDateTime(value);\n    }\n}\n\nfunction formatShortTimeFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatShortTime(value);\n    }\n}\n\nfunction formatLongTimeFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatLongTime(value);\n    }\n}\n\nfunction formatShortDayOfWeekFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatShortDayOfWeek(value);\n    }\n}\n\nfunction formatLongDayOfWeekFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatLongDayOfWeek(value);\n    }\n}\n\nfunction formatLongMonthDayFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatLongMonthDay(value);\n    }\n}\n\nfunction formatShortMonthDayFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatShortMonthDay(value);\n    }\n}\n\nfunction formatDateRangeFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value1: any, value2: any): string => {\n        return pipDateFormat.formatDateRange(value1, value2);\n    }\n}\n\nfunction formatDateTimeRangeFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value1: any, value2: any): string => {\n        return pipDateFormat.formatDateTimeRange(value1, value2);\n    }\n}\n\nfunction formatISOWeekFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatISOWeek(value);\n    }\n}\n\nfunction formatShortISOWeekFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatShortISOWeek(value);\n    }\n}\n\nfunction formatISOWeekOrdinalFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatISOWeekOrdinal(value);\n    }\n}\n\nfunction formatDateYFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatDateY(value);\n    }\n}\n\nfunction formatLongDateYFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatLongDateY(value);\n    }\n}\n\nfunction formatTodayDateLongTimeLongFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatTodayDateLongTimeLong(value);\n    }\n}\n\nfunction formatTodayDateShortTimeLongFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatTodayDateShortTimeLong(value);\n    }\n}\n\nfunction formatTodayDateLongTimeShortFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatTodayDateLongTimeShort(value);\n    }\n}\n\nfunction formatTodayDateShortTimeShortFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatTodayDateShortTimeShort(value);\n    }\n}\n\nfunction formatMillisecondsToSecondsFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateFormat.formatMillisecondsToSeconds(value);\n    }\n}\n\nfunction formatElapsedIntervalFilter(pipDateFormat: IDateFormatService) {\n    \"ngInject\";\n\n    return (value: any, start: any): string => {\n        return pipDateFormat.formatElapsedInterval(value, start);\n    }\n}\n\nfunction getDateJSONFilter(pipDateConvert: IDateConvertService) {\n    \"ngInject\";\n\n    return (value: any): string => {\n        return pipDateConvert.getDateJSON(value);\n    }\n}\n\nangular\n    .module('pipDate.Filter', [])\n    .filter('formatTime', formatTimeFilter)\n    .filter('formatDateOptional', formatDateOptionalFilter)\n    .filter('bbFormatDateLongTime', bbFormatDateLongTimeFilter)\n    .filter('formatShortDate', formatShortDateFilter)\n    .filter('formatMiddleDate', formatMiddleDateFilter)\n    .filter('formatLongDate', formatLongDateFilter)\n    .filter('formatMonth', formatMonthFilter)\n    .filter('formatLongMonth', formatLongMonthFilter)\n    .filter('formatYear', formatYearFilter)\n    .filter('formatWeek', formatWeekFilter)\n    .filter('formatShortWeek', formatShortWeekFilter)\n    .filter('formatShortDateTime', formatShortDateTimeFilter)\n    .filter('formatMiddleDateTime', formatMiddleDateTimeFilter)\n    .filter('formatLongDateTime', formatLongDateTimeFilter)\n    .filter('formatShortDateLongTime', formatShortDateLongTimeFilter)\n    .filter('formatMiddleDateLongTime', formatMiddleDateLongTimeFilter)\n    .filter('formatLongDateLongTime', formatLongDateLongTimeFilter)\n    .filter('formatFullDateTime', formatFullDateTimeFilter)\n    .filter('formatShortTime', formatShortTimeFilter)\n    .filter('formatLongTime', formatLongTimeFilter)\n    .filter('formatShortDayOfWeek', formatShortDayOfWeekFilter)\n    .filter('formatLongDayOfWeek', formatLongDayOfWeekFilter)\n    .filter('formatLongMonthDay', formatLongMonthDayFilter)\n    .filter('formatShortMonthDay', formatShortMonthDayFilter)\n    .filter('formatDateRange', formatDateRangeFilter)\n    .filter('formatDateTimeRange', formatDateTimeRangeFilter)\n    .filter('formatISOWeek', formatISOWeekFilter)\n    .filter('formatShortISOWeek', formatShortISOWeekFilter)\n    .filter('formatISOWeekOrdinal', formatISOWeekOrdinalFilter)\n    .filter('formatDateY', formatDateYFilter)\n    .filter('formatLongDateY', formatLongDateYFilter)\n    .filter('formatTodayDateLongTimeLong', formatTodayDateLongTimeLongFilter)\n    .filter('formatTodayDateShortTimeLong', formatTodayDateShortTimeLongFilter)\n    .filter('formatTodayDateLongTimeShort', formatTodayDateLongTimeShortFilter)\n    .filter('formatTodayDateShortTimeShort', formatTodayDateShortTimeShortFilter)\n    .filter('formatMillisecondsToSeconds', formatMillisecondsToSecondsFilter)\n    .filter('formatElapsedInterval', formatElapsedIntervalFilter);\n","import { DateTimeConfig, IDateFormatService, IDateFormatProvider } from './IDateFormatService';\n\n(() => {\n    class DateFormatService implements IDateFormatService {\n        private _config: DateTimeConfig;\n        protected _momentRanged: string[] = new Array('year', 'month', 'week', 'isoweek', 'day');\n        protected _defaultFormat: string = 'LL'\n\n        private isUndefinedOrNull(value: any): boolean {\n            return angular.isUndefined(value) || value === null;\n        }\n\n     \n        private formatDateTime(value: any, basicFormat: string): string {\n            let date: moment.Moment,\n                formatTpl: string;\n\n            if (this.isUndefinedOrNull(value)) {\n                return '';\n            }\n\n            if (this._config.timeZone != undefined && this._config.timeZone != null) {\n                date = moment(value).utcOffset(this._config.timeZone);\n            } else {\n                date = moment(value);\n            }\n\n            if (!date.isValid()) {\n                return '';\n            }\n\n            formatTpl = basicFormat ? basicFormat : this._defaultFormat;\n\n            return date.format(formatTpl);\n        }\n\n        private formatDateTimeY(value: any, basicFormat: string): string {\n            let date: moment.Moment,\n                nowDate: moment.Moment,\n                formatMoment: string;\n\n            if (this.isUndefinedOrNull(value)) {\n                return '';\n            }\n\n            if (this._config.timeZone != undefined && this._config.timeZone != null) {\n                date = moment(value).utcOffset(this._config.timeZone);\n            } else {\n                date = moment(value);\n            }\n\n            if (!date.isValid()) {\n                return '';\n            }\n\n            nowDate = moment();\n            formatMoment = moment.localeData().longDateFormat(basicFormat ? basicFormat : this._defaultFormat);\n\n            if (nowDate.year() == date.year()) {\n                formatMoment = formatMoment.replace(/Y/g, '').replace(/^\\W|\\W$|\\W\\W/, '');\n            }\n\n            return date.format(formatMoment);\n        }\n\n        private formatDay(value: any, basicFormat: string): string {\n            let date: moment.Moment,\n                format = moment.localeData().longDateFormat(basicFormat ? basicFormat : this._defaultFormat),\n                formatMonthYearless = format.replace(/Y/g, '').replace(/^\\W|\\W$|\\W\\W/, '').replace(/M/g, '');\n\n            if (this.isUndefinedOrNull(value)) {\n                return '';\n            }\n\n            if (this._config.timeZone != undefined && this._config.timeZone != null) {\n                date = moment(value).utcOffset(this._config.timeZone);\n            } else {\n                date = moment(value);\n            }\n\n            if (!date.isValid()) {\n                return '';\n            }\n\n            return date.format(formatMonthYearless);\n        }\n\n        private formatMonthDay(value: any, basicFormat: string): string {\n            let date: moment.Moment,\n                format = basicFormat ? basicFormat : this._defaultFormat,\n                formatLL = moment.localeData().longDateFormat(format),\n                formatYearlessLL = formatLL.replace(/Y/g, '').replace(/^\\W|\\W$|\\W\\W/, '');\n\n            if (this.isUndefinedOrNull(value)) {\n                return '';\n            }\n\n            if (this._config.timeZone != undefined && this._config.timeZone != null) {\n                date = moment(value).utcOffset(this._config.timeZone);\n            } else {\n                date = moment(value);\n            }\n\n            if (!date.isValid()) {\n                return '';\n            }\n\n            return date.format(formatYearlessLL);\n        }\n\n        //  use timezone not testing\n        private formatRange(value1: any, value2: any, basicFormat: string): string {\n            let dateStart: moment.Moment,\n                dateEnd: moment.Moment,\n                format = basicFormat ? basicFormat : this._defaultFormat;\n\n            if (this.isUndefinedOrNull(value1)) {\n                dateStart = null;\n            } else {\n                dateStart = (this._config.timeZone != undefined && this._config.timeZone != null) ? moment(value1).utcOffset(this._config.timeZone) : moment(value1);\n            }\n            if (this.isUndefinedOrNull(value2)) {\n                dateEnd = null;\n            } else {\n                dateEnd = (this._config.timeZone != undefined && this._config.timeZone != null) ? moment(value2).utcOffset(this._config.timeZone) : moment(value2);\n            }\n\n            if (dateStart === null && dateEnd === null) return '';\n\n            if (dateStart === null) {\n                return dateEnd.format(basicFormat);\n            }\n            if (dateEnd === null || dateStart.isSame(dateEnd)) {\n                return dateStart.format(basicFormat);;\n            }\n\n            if (dateStart.isAfter(dateEnd)) {\n                // todo localization\n                throw new Error('Date range error. Start date is more than end date.');\n            }\n\n            if (dateStart.year() == dateEnd.year()) {\n                if (dateStart.month() == dateEnd.month()) {\n                    return this.formatDay(dateStart, basicFormat) + '-' + dateEnd.format(basicFormat);\n                }\n                return this.formatMonthDay(dateStart, basicFormat) + '-' + dateEnd.format(basicFormat);\n\n            }\n            return dateStart.format(basicFormat) + '-' + dateEnd.format(basicFormat);\n\n        }\n\n        private toDateWithTime(value: any, formatDate: string, formatTime: string, firstTime?: boolean): any {\n            let date: moment.Moment,\n                result: string,\n                nowDate: moment.Moment;\n\n            if (this.isUndefinedOrNull(value)) {\n                return '';\n            }\n\n            if (this._config.timeZone != undefined && this._config.timeZone != null) {\n                date = moment(value).utcOffset(this._config.timeZone);\n            } else {\n                date = moment(value);\n            }\n            if (!date.isValid()) {\n                return '';\n            }\n\n            nowDate = moment();\n            if (firstTime) {\n                result = date.format(formatTime) + ' ' + date.format(formatDate);\n            } else {\n                result = date.format(formatDate) + ' ' + date.format(formatTime);\n            }\n\n            return result;\n        }\n\n        private toTodayDate(value: any, formatDate: string, formatTime: string): any {\n            let date: moment.Moment,\n                result: string,\n                nowDate: any;\n\n            if (this.isUndefinedOrNull(value)) {\n                return '';\n            }\n\n            if (this._config.timeZone != undefined && this._config.timeZone != null) {\n                date = moment(value).utcOffset(this._config.timeZone);\n            } else {\n                date = moment(value);\n            }\n            if (!date.isValid()) {\n                return '';\n            }\n\n            nowDate = moment();\n\n            if (nowDate.year() == date.year() && nowDate.month() == date.month() && nowDate.day() == date.day()) {\n                result = date.format(formatTime);\n            } else {\n                result = date.format(formatDate) + ' ' + date.format(formatTime);\n            }\n\n            return result;\n        }\n\n        public constructor(config: DateTimeConfig) {\n            this._config = config || { timeZone: null };\n        };\n\n        public get config(): DateTimeConfig {\n            return this._config;\n        }\n\n        public useTimeZone(offset: number) {\n            this._config.timeZone = offset;\n        }\n        \n        // formating functions \n        // -------------------\n\n        public formatTime(value: any, format: string): string {\n            return this.formatDateTime(value, 'LLL');\n        }\n\n        public formatDateOptional(value: any, format: string): string {\n            return this.formatDateTime(value, 'L');\n        }\n\n        // date formats\n        public formatShortDate(value: any): string {\n            return this.formatDateTime(value, 'L');\n        }\n\n        public bbFormatDateLongTime(value: any, firstTime?: boolean): string {\n            return this.toDateWithTime(value, 'MM/DD/YY', 'LTS', firstTime);\n        }\n\n        public formatMiddleDate(value: any): string {\n            return this.formatDateTime(value, 'll');\n        }\n\n        public formatLongDate(value: any): string {\n            return this.formatDateTime(value, 'LL');\n        }\n\n        public formatMonth(value: any): string {\n            return this.formatDateTime(value, 'MM');\n        }\n\n        public formatLongMonth(value: any): string {\n            return this.formatDateTime(value, 'MMMM');\n        }\n\n        public formatYear(value: any): string {\n            return this.formatDateTime(value, 'YYYY');\n        }\n\n        public formatWeek(value: any): string {\n            return this.formatDateTime(value, 'ww');\n        }\n\n        public formatShortWeek(value: any): string {\n            return this.formatDateTime(value, 'w');\n        }\n\n        public formatShortDateTime(value: any): string {\n            return this.toDateWithTime(value, 'L', 'LT');\n        }\n\n        public formatMiddleDateTime(value: any): string {\n            return this.formatDateTime(value, 'lll');\n        }\n\n        public formatLongDateTime(value: any): string {\n            return this.formatDateTime(value, 'LLL');\n        }\n\n        public formatFullDateTime(value: any): string {\n            return this.formatDateTime(value, 'LLLL');\n        }\n\n        public formatShortDateLongTime(value: any, firstTime?: boolean): string {\n            return this.toDateWithTime(value, 'L', 'LTS', firstTime);\n        }\n\n        public formatMiddleDateLongTime(value: any, firstTime?: boolean): string {\n            return this.toDateWithTime(value, 'll', 'LTS', firstTime);\n        }\n\n        public formatLongDateLongTime(value: any, firstTime?: boolean): string {\n            return this.toDateWithTime(value, 'LL', 'LTS', firstTime);\n        }\n\n        public formatShortTime(value: any): string {\n            return this.formatDateTime(value, 'LT');\n        }\n\n        public formatLongTime(value: any): string {\n            return this.formatDateTime(value, 'LTS');\n        }\n\n        public formatShortDayOfWeek(value: any): string {\n            return this.formatDateTime(value, 'dd');\n        }\n\n        public formatLongDayOfWeek(value: any): string {\n            return this.formatDateTime(value, 'dddd');\n        }\n\n        // public formatTimeNumber(value: any): string {\n        //     return this.formatDateTime(value, 'LLL');\n        // }\n\n        // public formatLongTimeNumber(value: any): string {\n        //     return this.formatDateTime(value, 'LLLL');\n        // }\n\n        ///-----------------\n\n        public formatLongMonthDay(value: any): string {\n            return this.formatMonthDay(value, 'LL');\n        }\n\n        public formatShortMonthDay(value: any): string {\n            return this.formatMonthDay(value, 'L');\n        }\n\n        public formatDateRange(value1: any, value2: any): string {\n            return this.formatRange(value1, value2, 'LL');\n        }\n\n        public formatDateTimeRange(value1: any, value2: any): string {\n            return this.formatRange(value1, value2, 'LLL');\n        }\n\n        // iso function\n        // --------------\n\n        public formatISOWeek(value: any): string {\n            return this.formatDateTime(value, 'WW');\n        }\n\n        public formatShortISOWeek(value: any): string {\n            return this.formatDateTime(value, 'W');\n        }\n\n        public formatISOWeekOrdinal(value: any): string {\n            return this.formatDateTime(value, 'Wo');\n        }\n        // special formats \n        // --------------\n\n        // year option displays if the current year is not equal to, the date of \n        public formatDateY(value: any): string {\n            return this.formatDateTimeY(value, 'L');\n        }\n\n        // year option displays if the current year is not equal to, the date of\n        public formatLongDateY(value: any): string {\n            return this.formatDateTimeY(value, 'LL');\n        }\n\n        // date displays if the current date  is not equal now \n        // September 4 1986 8:30:25 PM or 8:30:25 PM\n        public formatTodayDateLongTimeLong(value: any): string {\n            return this.toTodayDate(value, 'LL', 'LTS')\n        }\n\n        // date displays if the current date  is not equal now \n        // Sep 4 1986 8:30:25 PM or 8:30:25 PM\n        public formatTodayDateShortTimeLong(value: any): string {\n            return this.toTodayDate(value, 'LL', 'LTS')\n        }\n\n        // date displays if the current date  is not equal now \n        // September 4 1986 8:30 PM or 8:30 PM\n        public formatTodayDateLongTimeShort(value: any): string {\n            return this.toTodayDate(value, 'LL', 'LT')\n        }\n\n        // date displays if the current date  is not equal now \n        // Sep 4 1986 8:30 PM or 8:30 PM\n        public formatTodayDateShortTimeShort(value: any): string {\n            return this.toTodayDate(value, 'll', 'LT')\n        }\n\n        // todo\n        public formatMillisecondsToSeconds(value: any): string {\n            return '';\n        }\n\n        public formatElapsedInterval(value: any, start: any): string {\n            let date: moment.Moment,\n                nowDate: any;\n\n            if (this.isUndefinedOrNull(value)) {\n                return '';\n            }\n            if (this.isUndefinedOrNull(start)) {\n                nowDate = moment();\n            } else {\n                nowDate = moment(start);\n            }\n\n            date = moment(value);\n            if (!date.isValid() || !nowDate.isValid()) {\n                return '';\n            }\n\n            return moment(date).fromNow(nowDate);\n        }\n\n        public getDateJSON(date: any): string {\n            return JSON.stringify(moment(date));\n        }\n\n        \n    }\n\n    class DateTimeFormatService {\n        private _datetime: DateFormatService;\n        private _config: DateTimeConfig;\n\n        public constructor(\n            datetime: DateFormatService,\n        ) {\n            this._config = { timeZone: null };\n            this._datetime = datetime;\n        }\n\n        // todo Optional\n        public useTimeZone(offset: number): void {\n            return this._datetime.useTimeZone(offset);\n        }\n\n        // todo Optional\n        public formatTime(value: any, format: string): string {\n            return this._datetime.formatTime(value, format);\n        }\n\n        // todo Optional\n        public formatDateOptional(value: any, format: string): string {\n            return this._datetime.formatDateOptional(value, format);\n        }\n\n        public formatShortDate(value: any): string {\n            return this._datetime.formatShortDate(value);\n        }\n\n        public formatMiddleDate(value: any): string {\n            return this._datetime.formatMiddleDate(value);\n        }\n\n        public formatLongDate(value: any): string {\n            return this._datetime.formatLongDate(value);\n        }\n\n        public formatMonth(value: any): string {\n            return this._datetime.formatMonth(value);\n        }\n\n        public formatLongMonth(value: any): string {\n            return this._datetime.formatLongMonth(value);\n        }\n\n        public formatYear(value: any): string {\n            return this._datetime.formatYear(value);\n        }\n\n        public formatWeek(value: any): string {\n            return this._datetime.formatWeek(value);\n        }\n\n        public formatShortWeek(value: any): string {\n            return this._datetime.formatShortWeek(value);\n        }\n\n        public formatShortDateTime(value: any): string {\n            return this._datetime.formatShortDateTime(value);\n        }\n\n        public formatMiddleDateTime(value: any): string {\n            return this._datetime.formatMiddleDateTime(value);\n        }\n\n        public formatLongDateTime(value: any): string {\n            return this._datetime.formatLongDateTime(value);\n        }\n\n        public formatFullDateTime(value: any): string {\n            return this._datetime.formatFullDateTime(value);\n        }\n\n        public formatShortDateLongTime(value: any, firstTime?: boolean): string {\n            return this._datetime.formatShortDateLongTime(value, firstTime);\n        }\n\n        public formatMiddleDateLongTime(value: any, firstTime?: boolean): string {\n            return this._datetime.formatMiddleDateLongTime(value, firstTime);\n        }\n\n        public formatLongDateLongTime(value: any, firstTime?: boolean): string {\n            return this._datetime.formatLongDateLongTime(value, firstTime);\n        }\n\n        public bbFormatDateLongTime(value: any, firstTime?: boolean): string {\n            return this._datetime.bbFormatDateLongTime(value, firstTime);\n        }\n\n        public formatShortTime(value: any): string {\n            return this._datetime.formatShortTime(value);\n        }\n\n        public formatLongTime(value: any): string {\n            return this._datetime.formatLongTime(value);\n        }\n\n        public formatShortDayOfWeek(value: any): string {\n            return this._datetime.formatShortDayOfWeek(value);\n        }\n\n        public formatLongDayOfWeek(value: any): string {\n            return this._datetime.formatLongDayOfWeek(value);\n        }\n\n        public formatLongMonthDay(value: any): string {\n            return this._datetime.formatLongMonthDay(value);\n        }\n\n        public formatShortMonthDay(value: any): string {\n            return this._datetime.formatShortMonthDay(value);\n        }\n\n        public formatDateRange(value1: any, value2: any): string {\n            return this._datetime.formatDateRange(value1, value2);\n        }\n\n        public formatDateTimeRange(value1: any, value2: any): string {\n            return this._datetime.formatDateTimeRange(value1, value2);\n        }\n\n        // iso function\n        // --------------\n\n        public formatISOWeek(value: any): string {\n            return this._datetime.formatISOWeek(value);\n        }\n\n        public formatShortISOWeek(value: any): string {\n            return this._datetime.formatShortISOWeek(value);\n        }\n\n        public formatISOWeekOrdinal(value: any): string {\n            return this._datetime.formatISOWeekOrdinal(value);\n        }\n        // special formats \n        // --------------\n\n        // year option displays if the current year is not equal to, the date of \n        public formatDateY(value: any): string {\n            return this._datetime.formatDateY(value);\n        }\n\n        // year option displays if the current year is not equal to, the date of\n        public formatLongDateY(value: any): string {\n            return this._datetime.formatLongDateY(value);\n        }\n\n        // date displays if the current date  is not equal now \n        // September 4 1986 8:30:25 PM or 8:30:25 PM\n        public formatTodayDateLongTimeLong(value: any): string {\n            return this._datetime.formatTodayDateLongTimeLong(value);\n        }\n\n        // date displays if the current date  is not equal now \n        // Sep 4 1986 8:30:25 PM or 8:30:25 PM\n        public formatTodayDateShortTimeLong(value: any): string {\n            return this._datetime.formatTodayDateShortTimeLong(value);\n        }\n\n        // date displays if the current date  is not equal now \n        // September 4 1986 8:30 PM or 8:30 PM\n        public formatTodayDateLongTimeShort(value: any): string {\n            return this._datetime.formatTodayDateLongTimeShort(value);\n        }\n\n        // date displays if the current date  is not equal now \n        // Sep 4 1986 8:30 PM or 8:30 PM\n        public formatTodayDateShortTimeShort(value: any): string {\n            return this._datetime.formatTodayDateShortTimeShort(value);\n        }\n\n        public formatMillisecondsToSeconds(value: any) {\n            return this._datetime.formatMillisecondsToSeconds(value);\n        }\n\n        public formatElapsedInterval(value: any, start: any): string {\n            return this._datetime.formatElapsedInterval(value, start);\n        }\n\n        public getDateJSON(date: any): string {\n            return this._datetime.getDateJSON(date);\n        }\n\n    }\n\n    class DateFormatProvider extends DateFormatService implements IDateFormatProvider {\n        private _translation: DateFormatService;\n        private _service: DateTimeFormatService;\n\n        public constructor() {\n            super({ timeZone: null });\n        }\n\n        public $get(): any {\n            \"ngInject\";\n\n            if (this._service == null)\n                this._service = new DateTimeFormatService(this);\n            return this._service;\n        }\n    }\n\n    angular\n        .module('pipDate.Format', [])\n        .provider('pipDateFormat', DateFormatProvider);\n})();","export class DateTimeConfig {\n    timeZone: number;\n}\n\nexport interface IDateConvertService {\n    readonly config: DateTimeConfig;\n    useTimeZone(offset: number);\n   \n    getDateJSON(date: any): string;\n    getNextStart(value: any, category: string): Date;\n    getPrevStart(value: any, category: string): Date;\n    getNowStart(category: string): Date;\n\n    addHours(value: any, hours: number): Date;\n    toStartDay(value: any): Date;\n    toEndDay(value: any, offset: number): Date;\n    toStartWeek(value: any): Date;\n    toEndWeek(value: any, offset: number): Date;\n    toStartMonth(value: any): Date;\n    toEndMonth(value: any, offset: number): Date;\n    toStartYear(value: any): Date;\n    toEndYear(value: any, offset: number): Date;\n \n}\n\nexport interface IDateConvertProvider extends IDateConvertService, ng.IServiceProvider {}","export class DateTimeConfig {\n    timeZone: number;\n}\n\nexport interface IDateFormatService {\n    readonly config: DateTimeConfig;\n    useTimeZone(offset: number);\n\n    bbFormatDateLongTime(value: any, firstTime?: boolean): string; \n    \n    formatTime(value: any, format: string): string;\n    formatDateOptional(value: any, format: string): string;\n    formatShortDate(value: any): string;\n    formatMiddleDate(value: any): string;\n    formatLongDate(value: any): string;\n    formatMonth(value: any): string;\n    formatLongMonth(value: any): string;\n    formatYear(value: any): string;\n    formatWeek(value: any): string;\n    formatShortWeek(value: any): string;\n    formatShortDateTime(value: any): string;\n    formatMiddleDateTime(value: any): string;    \n    formatLongDateTime(value: any): string;\n    formatFullDateTime(value: any): string;\n    formatShortDateLongTime(value: any, firstTime?: boolean): string;\n    formatMiddleDateLongTime(value: any, firstTime?: boolean): string;    \n    formatLongDateLongTime(value: any, firstTime?: boolean): string;    \n    formatShortTime(value: any): string;\n    formatLongTime(value: any): string;\n    formatShortDayOfWeek(value: any): string;\n    formatLongDayOfWeek(value: any): string;\n    formatLongMonthDay(value: any): string;\n    formatShortMonthDay(value: any): string;\n    formatDateRange(value1: any, value2: any): string;\n    formatDateTimeRange(value1: any, value2: any): string;\n    formatISOWeek(value: any): string;\n    formatShortISOWeek(value: any): string;\n    formatISOWeekOrdinal(value: any): string;\n    formatDateY(value: any): string;\n    formatLongDateY(value: any): string;\n    formatTodayDateLongTimeLong(value: any): string;\n    formatTodayDateShortTimeLong(value: any): string;\n    formatTodayDateLongTimeShort(value: any): string;\n    formatTodayDateShortTimeShort(value: any): string;\n    formatMillisecondsToSeconds(value: any): string;\n    formatElapsedInterval(value: any, start: any): string;\n\n}\n\nexport interface IDateFormatProvider extends IDateFormatService, ng.IServiceProvider {}","\nangular.module('pipDate', [\n    'pipDate.Convert',\n    'pipDate.Format',\n    'pipDate.Filter'\n]);\n","\n(() => {\n    interface IDateRangeBindings {\n        [key: string]: any;\n\n        timeMode: any;\n        disabled: any;\n        model: any;\n        pipChanged: any;\n        type: any;\n        pipDateFormat: any;\n        pipNoLine: any;\n    }\n\n    const DateRangeBindings: IDateRangeBindings = {\n        timeMode: '@pipTimeMode',\n        disabled: '&ngDisabled',\n        model: '=ngModel',\n        pipChanged: '&',\n        type: '@pipDateRangeType',\n        pipDateFormat: '@',\n        pipNoLine: '@'\n    }\n\n\n    class DateRangeChanges implements ng.IOnChangesObject, IDateRangeBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        timeMode: ng.IChangesObject<string>;\n        disabled: ng.IChangesObject<() => void>;\n        model: ng.IChangesObject<any>;\n        pipChanged: ng.IChangesObject<() => void>;\n        type: ng.IChangesObject<string>;\n        pipDateFormat: ng.IChangesObject<any>;\n        pipNoLine: ng.IChangesObject<any>;\n    }\n\n    class DateRangeController {\n        private currentDate: Date;\n        private currentYear: number;\n        private currentMonth: number;\n        private currentDay: number;\n        private prevState: any = {};\n        private currentState: any = {};\n        private localeDate: any;\n        private momentMonths: any;\n        private momentDays: any;\n        private momentShortDays: any;\n        private momentFirstDayOfWeek: any;\n\n        public type: string;\n        public pipChanged: Function;\n        public year: number;\n        public month: number;\n        public week: any;\n        public day: number;\n        public shortMonths: string[];\n        public days: number[];\n        public weeks: any[];\n        public months: number[];\n        public years: number[];\n        public nameDays: string[];\n        public model: any;\n        public disabled: Function;\n        public disableControls: boolean;\n        public timeMode: string;\n\n        constructor(\n            public $mdMedia: angular.material.IMedia,\n            private $timeout: ng.ITimeoutService,\n            $scope: ng.IScope,\n            $element,\n            $rootScope: ng.IRootScopeService,\n            $injector: angular.auto.IInjectorService) {\n\n            this.localeDate = moment.localeData();\n            this.momentMonths = angular.isArray(this.localeDate._months) ? this.localeDate._months : this.localeDate._months.format;\n            this.momentDays = angular.isArray(this.localeDate._weekdays) ? this.localeDate._weekdays : this.localeDate._weekdays.format;\n            this.momentShortDays = this.localeDate._weekdaysMin;\n            this.momentFirstDayOfWeek = this.localeDate._week.dow;\n\n            this.currentDate = new Date();\n            this.currentYear = this.currentDate.getUTCFullYear();\n            this.currentMonth = this.currentDate.getUTCMonth() + 1;\n            this.currentDay = this.currentDate.getUTCDate();\n\n            this.init();\n\n            this.disableControls = this.disabled ? this.disabled() : false;\n\n\n            $scope.$watch('$ctrl.type', (newValue, oldValue) => {\n                if (newValue !== oldValue && oldValue) {\n                    this.init();\n                }\n            });\n\n        }\n\n        public $onChanges(changes: DateRangeChanges) {\n            if (changes.type && changes.type.currentValue) {\n                this.type = changes.type.currentValue;\n                this.init();\n            }\n\n            /*if (changes.type && changes.type.currentValue && changes.type.currentValue != changes.type.previousValue) {\n               this.type = changes.type.currentValue; \n               this.init();\n           }\n   \n           if (changes.disabled && changes.disabled.currentValue) {\n                this.disableControls = changes.disabled.currentValue();\n           }\n   \n           if (changes.model && changes.model.currentValue) {\n                 this.getValue(changes.model.currentValue);\n           }*/\n\n        }\n\n        public onMonthChanged(): void {\n            if (this.type === 'weekly') {\n                let date: Date, dayOfWeek: number;\n                date = new Date(Date.UTC(this.year, this.month - 1, 1));\n                dayOfWeek = date.getUTCDay() ? date.getUTCDay() : 7;\n                this.week = this.getWeekByDate(dayOfWeek, this.month - 1, this.year);\n                this.correctWeek();\n                this.adjustWeek();\n            } else {\n                this.adjustDay();\n            }\n            this.setValue();\n        }\n\n        public onYearChanged(): void {\n            let date: Date, dayOfWeek: number;\n            date = new Date(Date.UTC(this.year, this.month - 1, 1));\n            dayOfWeek = date.getUTCDay() ? date.getUTCDay() : 7;\n            if (this.type === 'weekly') {\n                this.week = this.getWeekByDate(dayOfWeek, this.month - 1, this.year);\n                this.adjustWeek();\n                this.correctWeek();\n            } else {\n                this.adjustDay();\n            }\n            this.setValue();\n        };\n\n        public onWeekChange() {\n            if (this.type === 'weekly') {\n                this.adjustWeek();\n                this.correctWeek();\n            } else {\n                this.adjustDay();\n            }\n            this.setValue();\n        };\n\n        public isDay(): boolean {\n            return this.type === 'daily';\n        };\n\n        public isWeek(): boolean {\n            return this.type === 'weekly';\n        };\n\n        public isMonth(): boolean {\n            return this.type === 'daily' ||\n                this.type === 'weekly' ||\n                this.type === 'monthly';\n        };\n\n        public onChange() {\n            if (this.pipChanged) {\n                this.$timeout(() => {\n                    this.pipChanged();\n                }, 0);\n            }\n        };\n\n        private setCurrent() {\n            this.currentState.day = this.day;\n            this.currentState.month = this.month;\n            this.currentState.year = this.year;\n            this.currentState.week = this.week;\n            this.currentState.dateRangeType = this.type;\n            this.currentState.model = this.model;\n        }\n\n        private fillLists() {\n            this.days = this.dayList(this.month, this.year);\n            this.weeks = this.weekList(this.month, this.year);\n            this.months = this.monthList();\n            this.shortMonths = this.monthList();\n            this.years = this.yearList();\n        }\n\n        private correctWeek() {\n            if (!this.prevState.model || this.prevState.model && this.prevState.model.getTime() >= this.model.getTime()) {\n                // if shift week -> increase month\n                if (this.weeks && this.weeks[this.week] && this.weeks[this.week].id <= 0) {\n                    if (this.month < 12) {\n                        this.month += 1;\n                    } else {\n                        this.month = 1;\n                        this.year += 1;\n                    }\n                    this.fillLists();\n                }\n            }\n        }\n\n        private init() {\n            let value: Date;\n\n            value = this.model ? new Date(this.model) : null;\n            this.day = value ? value.getUTCDate() : null;\n            this.month = value ? value.getUTCMonth() + 1 : null;\n            this.year = value ? value.getUTCFullYear() : null;\n            this.week = value ? this.getWeekByDate(this.day, this.month - 1, this.year) : null;\n\n            this.fillLists();\n\n            if (this.type === 'weekly') {\n                this.correctWeek();\n            }\n            this.adjustWeek();\n            this.setValue();\n        }\n\n        public onYearClick() {\n            if (!this.year) {\n                this.year = this.currentYear;\n            }\n        };\n\n        public onMonthClick() {\n            if (!this.month) {\n                this.month = this.currentMonth;\n            }\n        };\n\n        public onDayClick() {\n            if (!this.year) {\n                this.day = this.currentDay;\n            }\n        };\n        // ---------------------------------------------------------------------------------------\n\n        public getCountDay(month: number, year: number): number {\n            let count = 31;\n\n            if (month === 4 || month === 6 || month === 9 || month === 11) {\n                count = 30;\n                return count;\n            }\n\n            if (month === 2) {\n                if (year) {\n                    count = year % 4 === 0 ? 29 : 28;\n                    return count;\n                }\n                count = 28;\n            }\n\n            return count;\n\n        }\n\n        private dayList(month: number, year: number): number[] {\n            let count: number, days: number[];\n\n            count = this.getCountDay(month, year);\n            this.nameDays = [];\n            days = [];\n            for (let i: number = 1; i <= count; i++) {\n                days.push(i);\n                this.nameDays.push(this.momentShortDays[moment([year, month - 1, i]).weekday()]);\n            }\n\n            return days;\n        }\n\n        public getWeekByDate(day, month, year) {\n            let date: Date, dayOfWeek: number, startWeek;\n\n            date = new Date(Date.UTC(year, month, day));\n            dayOfWeek = date.getUTCDay() ? date.getUTCDay() : 7;\n\n            if (dayOfWeek === 1) {\n                startWeek = day;\n            } else {\n                startWeek = day + 1 - dayOfWeek;\n            }\n\n            return startWeek;\n        }\n\n        public getWeek(day: number, countDay: number, countPrevMonthDay) {\n            let endDay: number, startDay: number;\n\n            endDay = day + 6 > countDay ? countDay - day - 6 : day + 6;\n            startDay = day > 0 ? day : countPrevMonthDay + day;\n\n            return startDay.toString() + ' - ' + (Math.abs(endDay)).toString();\n        }\n\n        public weekList(month: number, year: number) { // возвращает список начала надели\n            let weeks: any[], countDay: number, countPrevMonthDay: number, startWeek: number;\n\n            weeks = [];  // в массиве первые дни недели в текущем месяце\n            countDay = this.getCountDay(month, year);\n            startWeek = this.getWeekByDate(1, month - 1, year);\n\n            countPrevMonthDay = month - 1 ? this.getCountDay(month - 1, year) : this.getCountDay(12, year - 1);\n            while (startWeek < countDay + 1) {\n                weeks.push({\n                    id: startWeek,\n                    name: this.getWeek(startWeek, countDay, countPrevMonthDay)\n                });\n                startWeek = startWeek + 7;\n            }\n\n            return weeks;\n        }\n\n        private monthList() {\n            let months: any[] = [];\n\n            for (let i: number = 1; i <= 12; i++) {\n                months.push({\n                    id: i,\n                    name: this.momentMonths[i - 1]\n                });\n            }\n\n            return months;\n        }\n\n        private yearList() {\n            let startYear: number, endYear: number, years: any[] = [];\n\n            switch (this.timeMode) {\n                case 'future':\n                    startYear = this.currentYear;\n                    endYear = this.currentYear + 100;\n                    break;\n                case 'past':\n                    startYear = this.currentYear - 100;\n                    endYear = this.currentYear;\n                    break;\n                case 'now':\n                    startYear = this.currentYear - 50;\n                    endYear = this.currentYear + 100;\n                    break;\n                default:\n                    startYear = this.currentYear - 50;\n                    endYear = this.currentYear + 50;\n                    break;\n            }\n            if (this.timeMode === 'future') {\n                for (let i: number = startYear; i <= endYear; i++) {\n                    years.push(i);\n                }\n            } else {\n                for (let i: number = endYear; i >= startYear; i--) {\n                    years.push(i);\n                }\n            }\n\n            return years;\n        }\n\n        private adjustDay() {\n            let days = this.dayList(this.month, this.year);\n\n            switch (this.type) {\n                case 'monthly':\n                    this.day = 1;\n                    break;\n                case 'yearly':\n                    this.month = 1;\n                    this.day = 1;\n                    break;\n                default:\n                    if (this.days.length !== days.length) {\n                        if (this.day > days.length) {\n                            this.day = days.length;\n                        }\n                    }\n                    break;\n            }\n            this.days = days;\n        }\n\n        private adjustWeek() {\n            let weeks = this.weekList(this.month, this.year);\n            this.week = this.getWeekByDate(this.week, this.month - 1, this.year);\n            this.weeks = weeks;\n        }\n\n        private getValue(v) {\n            let value: Date, day: number, month: number, year: number, week: string;\n\n            value = v ? new Date(v) : null;\n            // Define values\n            day = value ? value.getUTCDate() : null;\n            month = value ? value.getUTCMonth() + 1 : null;\n            year = value ? value.getUTCFullYear() : null;\n            week = value ? this.getWeekByDate(day, month - 1, year) : null;\n            // Exit if nothing to update\n            if (this.day === day && this.month === month && this.year === year && this.week === week) {\n                return;\n            }\n            // Assign values to scope\n            this.day = day;\n            this.month = month;\n            this.year = year;\n            this.week = week;\n\n            // Define data sources\n            this.days = this.dayList(this.month, this.year);\n            this.weeks = this.weekList(this.month, this.year);\n        }\n\n        public setValue() {\n            let value;\n\n            if (this.type === 'weekly') {\n                value = new Date(this.year, this.month - 1, this.week, 0, 0, 0, 0);\n                value = new Date(value.getTime() - value.getTimezoneOffset() * 60000);\n                this.model = value;\n            } else {\n                value = new Date(this.year, this.month - 1, this.day, 0, 0, 0, 0);\n                value = new Date(value.getTime() - value.getTimezoneOffset() * 60000);\n                this.model = value;\n            }\n\n            this.prevState = _.cloneDeep(this.currentState);\n            this.setCurrent();\n            this.onChange();\n        }\n\n    }\n\n    const daterange: ng.IComponentOptions = {\n        bindings: DateRangeBindings,\n        templateUrl: 'date_range/DateRange.html',\n        controller: DateRangeController \n\n    };\n    angular\n        .module('pipDateRange', ['pipDates.Templates'])\n        .component('pipDateRange', daterange)\n})();\n","{\n    function translateFilter($injector: angular.auto.IInjectorService) {\n        let pipTranslate: any = $injector.has('pipTranslate') \n            ? $injector.get('pipTranslate') : null;\n\n        return (key: string) => {\n            return pipTranslate  ? pipTranslate.translate(key) || key : key;\n        }\n    }\n\n    angular\n        .module('pipDates.Translate', [])\n        .filter('translate', translateFilter);\n}","angular.module('pipDates', [\n    'pipDate',\n    'pipDate',\n    'pipTimeRange',\n    'pipTimeRangeEdit',\n    'pipDateRange',\n    'pipDates.Translate'\n]);\n","\n(() => {\n    class TimeRangeData {\n        start: Date;\n        end: Date;\n    }\n\n    interface ITimeRangeBindings {\n        [key: string]: any;\n\n        start: any;\n        end: any;\n    }\n\n    const TimeRangeBindings: ITimeRangeBindings = {\n        start: '<pipStartDate',\n        end: '<pipEndDate'\n    }\n\n    class TimeRangeChanges implements ng.IOnChangesObject, ITimeRangeBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        start: ng.IChangesObject<Date>;\n        end: ng.IChangesObject<Date>;\n    }\n\n    class TimeRangeController {\n        public data: TimeRangeData;\n        public start: Date;\n        public end: Date;\n\n        constructor($scope: ng.IScope, $attrs: ng.IAttributes, $element: JQuery) {\n            this.data = new TimeRangeData();\n            this.defineStartDate();\n            this.defineEndDate();\n\n            $element.addClass('pip-time-range');\n        }\n\n        public $onChanges(changes: TimeRangeChanges) {\n            if (changes.start && changes.start.currentValue) {\n                this.data.start = null;\n                this.defineStartDate();\n            }\n            if (changes.end && changes.end.currentValue) {\n                this.data.end = null;\n                this.defineEndDate();\n            }\n        }\n\n        private getDateJSON(value: any): Date {\n            return value ? new Date(value) : null;\n        }\n\n        private defineStartDate() {\n            if (this.start !== null && this.start !== undefined) {\n                this.data.start = _.isDate(this.start) ? this.start\n                    : this.getDateJSON(this.start);\n            }\n        }\n\n        private defineEndDate() {\n            if (this.end !== null && this.end !== undefined) {\n                this.data.end = _.isDate(this.end) ? this.end\n                    : this.getDateJSON(this.end);\n            }\n        }\n\n        private toBoolean(value): boolean {\n            if (value == null) return false;\n            if (!value) return false;\n            value = value.toString().toLowerCase();\n            return value == '1' || value == 'true';\n        }\n    }\n\n    const TimeRangeComponent: ng.IComponentOptions = {\n        bindings: TimeRangeBindings,\n        templateUrl: 'time_range/TimeRange.html',\n        controller: TimeRangeController\n    }\n\n    angular.module('pipTimeRange', [])\n        .component('pipTimeRange', TimeRangeComponent);\n\n})();\n","export const IntervalTimeRange = 30;\nexport const MinutesInHour = 60;\nexport const HoursInDay = 24;\nexport const MillisecondsInSecond = 1000;\n\n{\n    class TimeRangeEditData {\n        endTime: number;\n        startTime: number;\n        startDate: Date;\n        endDate: Date;\n        duration: number;\n        bind: boolean = false;\n    }\n\n\n    interface ITimeRangeEditBindings {\n        [key: string]: any;\n\n        pipStartDate: any,\n        pipChanged: any,\n        pipEndDate: any,\n        pipStartLabel: any,\n        pipEndLabel: any,\n        disabled: any,\n        pipHideTime: any,\n        pipSize: any\n    }\n\n    const TimeRangeEditBindings: ITimeRangeEditBindings = {\n        pipStartDate: '<',\n        pipChanged: '=',\n        pipEndDate: '<',\n        pipStartLabel: '@',\n        pipEndLabel: '@',\n        disabled: '&ngDisabled',\n        pipHideTime: '=',\n        pipSize: '='\n    }\n\n    class TimeRangeEditChanges implements ng.IOnChangesObject, ITimeRangeEditBindings {\n        [key: string]: ng.IChangesObject<any>;\n\n        pipStartDate: ng.IChangesObject<Date>;\n        pipChanged: ng.IChangesObject<(start: Date, end: Date) => void>\n        pipEndDate: ng.IChangesObject<Date>;\n        pipStartLabel: ng.IChangesObject<string>;\n        pipEndLabel: ng.IChangesObject<string>;\n        disabled: ng.IChangesObject<() => void>;\n        pipHideTime: ng.IChangesObject<boolean>;\n        pipSize: ng.IChangesObject<any>;\n    }\n\n\n    class TimeRangeEditController {\n        public startLabel: string = 'Start time';\n        public endLabel: string = 'End time';\n        public pipStartLabel: string;\n        public pipEndLabel: string;\n\n        public pipEndDate: Date;\n        public pipStartDate: Date;\n        public pipHideTime: boolean;\n        public pipSize;\n        public showTime: boolean;\n        public data: TimeRangeEditData;\n        public intervalTimeCollection: any;\n        public disabled: () => boolean;\n\n        public pipChanged: (start: Date, end: Date) => void;\n\n        constructor(\n            private $injector: angular.auto.IInjectorService,\n            private pipDateConvert,\n            private $scope: ng.IScope,\n            $element: JQuery) {\n\n            this.translate();\n            this.intervalTimeCollection = this.getTimeInterval();\n            this.data = new TimeRangeEditData();\n            this.initDate();\n            this.defineDate();\n\n            // Add class\n            $element.addClass('pip-time-range-edit');\n        }\n\n        public $onChanges(changes: TimeRangeEditChanges) {\n            if (changes.pipStartDate && changes.pipStartDate.currentValue) {\n                this.pipStartDate = changes.pipStartDate.currentValue;\n                this.initDate();\n                this.defineDate();\n            }\n            if (changes.pipEndDate && changes.pipEndDate.currentValue) {\n                this.pipEndDate = changes.pipEndDate.currentValue;\n                this.initDate();\n                this.defineDate();\n            }\n\n        }\n\n        private translate() {\n            let pipTranslate: any = this.$injector.has('pipTranslate') ? this.$injector.get('pipTranslate') : null;\n\n            if (pipTranslate) {\n                pipTranslate.setTranslations('en', {\n                    EVENT_NEW_START_TIME: 'Start time',\n                    EVENT_NEW_END_TIME: 'End time'\n                });\n                pipTranslate.setTranslations('ru', {\n                    EVENT_NEW_START_TIME: 'Начало',\n                    EVENT_NEW_END_TIME: 'Конец'\n                });\n                this.startLabel = this.pipStartLabel ? pipTranslate.translate(this.pipStartLabel)\n                    : pipTranslate.translate('EVENT_NEW_START_TIME');\n                this.endLabel = this.pipEndLabel ? pipTranslate.translate(this.pipEndLabel)\n                    : pipTranslate.translate('EVENT_NEW_END_TIME');\n            }\n        }\n\n        private getDateJSON(value: any): Date {\n            return value ? new Date(value) : null;\n        }\n\n        private setDuration() {\n            let start, end;\n\n            if (!this.data.startDate || !this.data.endDate) {\n                return null;\n            }\n\n            start = new Date(this.data.startDate.getTime() + this.data.startTime * MinutesInHour * MillisecondsInSecond);\n            end = new Date(this.data.endDate.getTime() + this.data.endTime * MinutesInHour * MillisecondsInSecond);\n\n            return end - start;\n        }\n\n        private validateStartDate() {\n            let date: Date, start: Date, end: Date, endTime: number, startTime: number;\n            // если начальная дата не задана, обнуляем и выходим\n            if (!this.data.startDate) {\n                this.data.startTime = null;\n\n                return;\n            }\n\n            // еcли не задано начальное время - задаем его\n            if (_.isUndefined(this.data.startTime) || _.isNull(this.data.startTime)) {\n                if (!this.data.endTime) {\n                    start = new Date();\n                    startTime = date.getTime() - this.pipDateConvert.toStartDay(date);\n                    this.data.startTime = Math.floor(startTime / (IntervalTimeRange * MinutesInHour * MillisecondsInSecond)) * IntervalTimeRange;\n                } else {\n                    this.data.startTime = this.data.endTime === 0 ? 0 : this.data.endTime - IntervalTimeRange;\n                }\n            }\n\n            start = new Date(this.data.startDate.getTime() + this.data.startTime * MinutesInHour * MillisecondsInSecond);\n\n            // Если есть длительность, то сохраняем ее. Длительность можно изменить только изменяя конечную дату\n            if (this.data.duration) {\n                end = new Date(start.getTime() + this.data.duration);\n                this.data.endDate = this.pipDateConvert.toStartDay(end);\n                endTime = end.getTime() - this.data.endDate.getTime();\n                this.data.endTime = Math.floor(endTime / (IntervalTimeRange * MinutesInHour * MillisecondsInSecond)) * IntervalTimeRange;\n            } else {\n                // Если нет длительности сравниваем даты\n                end = new Date(this.data.endDate.getTime() + this.data.endTime * MinutesInHour * MillisecondsInSecond);\n                if (start >= end) {\n                    // Если начальная дата больше, то двигаем конечную дату\n                    this.data.endDate = this.pipDateConvert.toStartDay(new Date(start.getTime() + (IntervalTimeRange * MinutesInHour * MillisecondsInSecond)));\n                    this.data.endTime = (this.data.startTime + IntervalTimeRange) % (HoursInDay * MinutesInHour); // минут в сутках\n                }\n            }\n\n            this.data.startTime = Math.round(this.data.startTime / IntervalTimeRange) * IntervalTimeRange;\n        }\n\n\n        private validateEndDate() {\n            let date: any, start: Date, end: Date;\n\n            if (!this.data.endDate) {\n                this.data.endTime = null;\n\n                return;\n            }\n\n            // еcли не задано конечное время - задаем его\n            if (_.isUndefined(this.data.endTime) || _.isNull(this.data.endTime)) {\n                if (!this.data.startTime) {\n                    date = new Date();\n                    date = date.getTime() - this.pipDateConvert.toStartDay(date);\n                    this.data.endTime = Math.floor(date / (IntervalTimeRange * MinutesInHour * MillisecondsInSecond)) * IntervalTimeRange;\n                } else {\n                    this.data.endTime = this.data.startTime === (HoursInDay * MinutesInHour - IntervalTimeRange) ? (HoursInDay * MinutesInHour - IntervalTimeRange) : this.data.startTime + IntervalTimeRange;\n                }\n            }\n\n            start = new Date(this.data.startDate.getTime() + this.data.startTime * MinutesInHour * MillisecondsInSecond);\n            end = new Date(this.data.endDate.getTime() + this.data.endTime * MinutesInHour * MillisecondsInSecond);\n\n            if (start >= end) {\n                // Если начальная дата больше, то двигаем начальную дату\n                this.data.startDate = this.pipDateConvert.toStartDay(new Date(end.getTime() - IntervalTimeRange * MinutesInHour * MillisecondsInSecond));\n                this.data.startTime = this.data.endTime % (HoursInDay * MinutesInHour) === 0 ? (HoursInDay * MinutesInHour - IntervalTimeRange) : this.data.endTime - IntervalTimeRange;\n            }\n\n            this.data.endTime = Math.round(this.data.endTime / IntervalTimeRange) * IntervalTimeRange;\n            this.data.duration = this.setDuration();\n        }\n\n        private setDate() {\n            let time: number;\n\n            if (!this.data) this.data = new TimeRangeEditData();\n            this.data.bind = false;\n\n            if (this.data.startDate) {\n                time = this.data.startTime ? this.data.startTime * MinutesInHour * MillisecondsInSecond : 0;\n                this.pipStartDate = new Date(this.data.startDate.getTime() + time);\n            }\n\n            if (this.data.endDate) {\n                time = this.data.endTime ? this.data.endTime * MinutesInHour * MillisecondsInSecond : 0;\n                this.pipEndDate = new Date(this.data.endDate.getTime() + time);\n            }\n\n            this.data.bind = true;\n        }\n\n        private defineDate() {\n            let start: Date, end: Date;\n\n            if (this.pipStartDate !== null && this.pipStartDate !== undefined) {\n                start = _.isDate(this.pipStartDate) ? this.pipStartDate : null;\n\n                if (!start) {\n                    start = this.getDateJSON(this.pipStartDate);\n                }\n\n                this.data.startDate = this.pipDateConvert.toStartDay(start);\n                this.data.startTime = (<any>new Date(start) - <any>this.data.startDate) / (MinutesInHour * MillisecondsInSecond);\n            }\n\n            if (this.pipEndDate !== null && this.pipEndDate !== undefined) {\n                end = _.isDate(this.pipEndDate) ? this.pipEndDate : null;\n\n                if (!start) {\n                    end = this.getDateJSON(this.pipEndDate);\n                }\n\n                this.data.endDate = this.pipDateConvert.toStartDay(end);\n                this.data.endTime = (<any>new Date(end) - <any>this.data.endDate) / (MinutesInHour * MillisecondsInSecond);\n            }\n\n            this.validateStartDate();\n            this.validateEndDate();\n            this.data.duration = this.setDuration();\n            this.setDate();\n        }\n\n        private getTimeInterval() {\n            let result, minutes: number;\n\n            result = [];\n            for (let i: number = 0; i < 24; i++) {\n                for (let j: number = 0; j < 2; j++) {\n                    minutes = j * IntervalTimeRange;\n                    result.push({\n                        id: i * MinutesInHour + minutes,\n                        time: _.pad(i.toString(), 3, '0').substr(0, 2) + ':' + _.pad(minutes.toString(), 2, '0')\n                    });\n                }\n            }\n\n            return result;\n        }\n\n        private toBoolean(value: any): boolean {\n            if (value == null) return false;\n            if (!value) return false;\n            value = value.toString().toLowerCase();\n            return value == '1' || value == 'true';\n        }\n\n        private initDate() {\n            this.data.startDate = null;\n            this.data.startTime = null;\n            this.data.endDate = null;\n            this.data.endTime = null;\n            this.data.duration = null;\n            this.showTime = !this.toBoolean(this.pipHideTime);\n        }\n\n        public onChangeStartDate(newV) {\n            this.validateStartDate();\n            this.data.duration = this.setDuration();\n            this.setDate();\n            this.pipChanged(this.pipStartDate, this.pipEndDate);\n        };\n\n        public onChangeEndDate() {\n            this.validateEndDate();\n            this.data.duration = this.setDuration();\n            this.setDate();\n            this.pipChanged(this.pipStartDate, this.pipEndDate);\n        };\n\n        public onChangeStartTime() {\n            if (!this.data.startDate) {\n                this.data.startDate = this.pipDateConvert.toStartDay(new Date());\n            }\n            this.validateStartDate();\n            this.data.duration = this.setDuration();\n            this.setDate();\n            this.pipChanged(this.pipStartDate, this.pipEndDate);\n        };\n\n        public onChangeEndTime() {\n            if (!this.data.endDate) {\n                this.data.endDate = this.pipDateConvert.toStartDay(new Date());\n            }\n\n            this.validateEndDate();\n            this.data.duration = this.setDuration();\n            this.setDate();\n            this.pipChanged(this.pipStartDate, this.pipEndDate);\n        };\n\n        public isDisabled() {\n            if (this.disabled) {\n                return this.disabled();\n            }\n\n            return false;\n        };\n\n    }\n\n    const TimeRangeEditComponent: ng.IComponentOptions = {\n        bindings: TimeRangeEditBindings,\n        templateUrl: 'time_range_edit/TimeRangeEdit.html',\n        controller: TimeRangeEditController\n    };\n    angular.module('pipTimeRangeEdit', [])\n        .component('pipTimeRangeEdit', TimeRangeEditComponent)\n\n}\n","(function(module) {\ntry {\n  module = angular.module('pipDates.Templates');\n} catch (e) {\n  module = angular.module('pipDates.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('date/Date.html',\n    '<div class=\"pip-date layout-row flex\" tabindex=\"-1\"><md-input-container class=\"input-container flex\"><md-select class=\"pip-date-day flex\" ng-disabled=\"$ctrl.disableControls\" ng-model=\"$ctrl.day\" placeholder=\"{{$ctrl.dayLabel}}\" ng-change=\"$ctrl.setValue()\"><md-option ng-value=\"opt\" ng-repeat=\"opt in $ctrl.days track by opt\">{{:: opt }}</md-option></md-select></md-input-container><div class=\"input-container-separator flex-fixed\"></div><md-input-container class=\"input-container flex\"><md-select class=\"pip-date-monthflex\" ng-disabled=\"$ctrl.disableControls\" ng-model=\"$ctrl.month\" placeholder=\"{{$ctrl.monthLabel}}\" ng-change=\"$ctrl.onMonthChanged()\"><md-option ng-value=\"opt.id\" ng-repeat=\"opt in $ctrl.months track by opt.id\">{{:: opt.name }}</md-option></md-select></md-input-container><div class=\"input-container-separator flex-fixed\"></div><md-input-container class=\"input-container flex\"><md-select class=\"pip-date-year flex\" ng-disabled=\"$ctrl.disableControls\" ng-model=\"$ctrl.year\" placeholder=\"{{$ctrl.yearLabel}}\" ng-change=\"$ctrl.onYearChanged()\"><md-option ng-value=\"opt\" ng-repeat=\"opt in $ctrl.years track by opt\">{{:: opt }}</md-option></md-select></md-input-container></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDates.Templates');\n} catch (e) {\n  module = angular.module('pipDates.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('date_range/DateRange.html',\n    '<div class=\"pip-date-range layout-row flex\" tabindex=\"-1\"><md-input-container ng-show=\"$ctrl.isDay()\" class=\"input-container pip-day flex\" ng-class=\"{\\'flex-fixed\\' : $ctrl.$mdMedia(\\'gt-xs\\')}\"><md-select class=\"select-day\" ng-class=\"{\\'pip-no-line\\' : $ctrl.pipNoLine}\" ng-disable=\"{{$ctrl.disableControls}}\" md-on-open=\"$ctrl.onDayClick()\" ng-model=\"$ctrl.day\" ng-change=\"$ctrl.setValue()\" placeholder=\"{{$ctrl.dayLabel}}\" aria-label=\"DAY\"><md-option ng-value=\"opt\" ng-repeat=\"opt in $ctrl.days track by opt\">{{$ctrl.nameDays[$index]}} {{ opt }}</md-option></md-select></md-input-container><md-input-container ng-show=\"$ctrl.isWeek()\" class=\"input-container flex\" ng-class=\"{\\'flex-fixed\\' : $ctrl.$mdMedia(\\'gt-xs\\')}\"><md-select class=\"select-week\" ng-class=\"{\\'pip-no-line\\' : $ctrl.pipNoLine}\" ng-disable=\"{{$ctrl.disableControls}}\" ng-model=\"$ctrl.week\" ng-change=\"$ctrl.onWeekChange()\" placeholder=\"{{$ctrl.weekLabel}}\" aria-label=\"WEEK\"><md-option ng-value=\"opt.id\" ng-repeat=\"opt in $ctrl.weeks track by opt.id\">{{ opt.name }}</md-option></md-select></md-input-container><div class=\"flex-fixed\" ng-class=\"{\\'space16\\': $ctrl.$mdMedia(\\'gt-xs\\'), \\'space8\\': $ctrl.$mdMedia(\\'xs\\')}\" ng-show=\"$ctrl.isDay() || $ctrl.isWeek()\"></div><md-input-container ng-show=\"$ctrl.isMonth() && !$ctrl.monthFormatShort\" class=\"input-container flex\" ng-class=\"{\\'flex-fixed\\' : $ctrl.$mdMedia(\\'gt-xs\\')}\"><md-select class=\"select-month\" ng-class=\"{\\'pip-no-line\\' : $ctrl.pipNoLine}\" ng-disable=\"{{$ctrl.disableControls}}\" md-on-open=\"$ctrl.onMonthClick()\" ng-model=\"$ctrl.month\" ng-change=\"$ctrl.onMonthChanged()\" placeholder=\"{{$ctrl.monthLabel}}\" aria-label=\"MONTH\"><md-option ng-value=\"opt.id\" ng-repeat=\"opt in $ctrl.months track by opt.id\">{{ opt.name }}</md-option></md-select></md-input-container><md-input-container ng-show=\"$ctrl.isMonth() && $ctrl.monthFormatShort\" class=\"flex input-container\" ng-class=\"{\\'flex-fixed\\' : $ctrl.$mdMedia(\\'gt-xs\\')}\"><md-select class=\"select-month\" ng-class=\"{\\'pip-no-line\\' : $ctrl.pipNoLine}\" ng-disable=\"{{$ctrl.disableControls}}\" md-on-open=\"$ctrl.onMonthClick()\" ng-model=\"$ctrl.month\" ng-change=\"$ctrl.onMonthChanged()\" placeholder=\"{{$ctrl.monthLabel}}\" aria-label=\"MONTH\"><md-option ng-value=\"opt.id\" ng-repeat=\"opt in $ctrl.shortMonths track by opt.id\">{{ opt.name }}</md-option></md-select></md-input-container><div class=\"flex-fixed\" ng-class=\"{\\'space16\\': $ctrl.$mdMedia(\\'gt-xs\\'), \\'space8\\': $ctrl.$mdMedia(\\'xs\\')}\" ng-show=\"$ctrl.isMonth()\"></div><md-input-container class=\"input-container flex\" ng-class=\"{\\'flex-fixed\\' : $ctrl.$mdMedia(\\'gt-xs\\')}\"><md-select class=\"select-year\" ng-class=\"{\\'pip-no-line\\' : $ctrl.pipNoLine}\" ng-disable=\"{{$ctrl.disableControls}}\" md-on-open=\"$ctrl.onYearClick()\" ng-model=\"$ctrl.year\" ng-change=\"$ctrl.onYearChanged()\" placeholder=\"{{$ctrl.yearLabel}}\" aria-label=\"YEAR\"><md-option ng-value=\"opt\" ng-repeat=\"opt in $ctrl.years track by opt\">{{ opt }}</md-option></md-select></md-input-container></div>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDates.Templates');\n} catch (e) {\n  module = angular.module('pipDates.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('time_range/TimeRange.html',\n    '<p><span ng-if=\"$ctrl.data.start != null\">{{$ctrl.data.start | formatLongDateTime}}</span> <span class=\"separator\" ng-if=\"$ctrl.data.start && $ctrl.data.end\">-</span> <span ng-if=\"$ctrl.data.end != null\">{{$ctrl.data.end | formatLongDateTime}}</span></p>');\n}]);\n})();\n\n(function(module) {\ntry {\n  module = angular.module('pipDates.Templates');\n} catch (e) {\n  module = angular.module('pipDates.Templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('time_range_edit/TimeRangeEdit.html',\n    '<div class=\"event-edit layout-row layout-xs-column flex layout-align-start-start\"><div flex=\"47\" class=\"start-time-container\"><p class=\"text-caption text-grey\">{{$ctrl.startLabel}}</p><div class=\"layout-row layout-align-space-between-center\"><div class=\"pip-datepicker-container\" flex=\"49\"><md-datepicker ng-model=\"$ctrl.data.startDate\" xmd-placeholder=\"{{$ctrl.startLabel}}\" ng-change=\"$ctrl.onChangeStartDate()\" ng-disabled=\"$ctrl.isDisabled()\" aria-label=\"START-DATE\"></md-datepicker></div><div flex=\"\" ng-if=\"$ctrl.showTime\"><md-input-container class=\"input-container\"><md-select aria-label=\"START-TIME\" ng-model=\"$ctrl.data.startTime\" ng-disabled=\"$ctrl.isDisabled()\" ng-change=\"$ctrl.onChangeStartTime($ctrl.data.startTime)\"><md-option ng-value=\"opt.id\" ng-repeat=\"opt in $ctrl.intervalTimeCollection track by opt.id\">{{ opt.time }}</md-option></md-select></md-input-container></div></div></div><div flex=\"47\" class=\"end-time-container\"><p class=\"text-caption text-grey\">{{$ctrl.endLabel}}</p><div class=\"layout-row layout-align-space-between-center\"><div class=\"pip-datepicker-container flex-49\"><md-datepicker ng-model=\"$ctrl.data.endDate\" xmd-placeholder=\"{{$ctrl.endLabel}}\" ng-disabled=\"$ctrl.isDisabled()\" ng-change=\"$ctrl.onChangeEndDate()\" aria-label=\"END-DATE\"></md-datepicker></div><div flex=\"\" ng-if=\"$ctrl.showTime\"><md-input-container class=\"input-container\"><md-select aria-label=\"END-TIME\" ng-model=\"$ctrl.data.endTime\" ng-change=\"$ctrl.onChangeEndTime()\" ng-disabled=\"$ctrl.isDisabled()\"><md-option ng-value=\"opt.id\" ng-repeat=\"opt in $ctrl.intervalTimeCollection track by opt.id\">{{ opt.time }}</md-option></md-select></md-input-container></div></div></div></div>');\n}]);\n})();\n\n//# sourceMappingURL=pip-webui-dates-html.min.js.map\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}